/**************************
* THE DOWNLOAD BUTTON AT STEP4 PATHWAY VIEW
****************************/

// '<a href="javascript:void(0)" class="button helpTip" id="downloadPathwayButton"><i class="fa fa-cloud-download"></i></a>' +
//                                {xtype: "splitbutton", text: '<i class="fa fa-cloud-download"></i>', tooltip: "Download image", cls: "acceptButtonSmall", width: 50,
//                                    menu: new Ext.menu.Menu({
//                                        items: [
//                                            {text: 'Download as SVG', handler: function () {
//                                                    me.downloadPathway("svg");
//                                                }},
//                                            {text: 'Download as PNG', handler: function () {
//                                                    me.downloadPathway("png");
//                                                }},
//                                            {text: 'Download as PDF', handler: function () {
//                                                    me.downloadPathway("pdf");
//                                                }}
//                                        ]})
//                                },
//                            ]
//                        }


					$("#downloadPathwayButton").click(function() {
						//                        me.downloadPathway();
					});
/**************************************
 * FUNCTIONS FOR SHOW/REMOVE TOOLTIPS
 ***************************************/
//showToolTip = function (nodeID) {
//    var pathwayID = nodeID.split("_")[0];
//    //GET THE PATHWAY VIEW
//    var pathwayView = application.getMainView().getSubView("PA_Step4JobView").getPathwayView(pathwayID);
//    var featureSetViews = pathwayView.items;
//
//    var graphicalOptions = pathwayView.getModel().getGraphicalOptions();
//
//    //GET THE VIEW PORT AND IF THE IMAGE IS BIGGER, CALCULATE THE ADJUST FACTOR
//    var viewportWidth = $("#pathwaysPanelsContainer").width();
//    var imageWidth = graphicalOptions.getImageWidth(), imageHeight = graphicalOptions.getImageHeight();
//    var imageProportion = imageHeight / imageWidth;
//    var adjustFactor = 1;
//
//    //if the image is bigger than the available space, the it's neccessary to adjust the image as well as all the coordinateS
//    if (viewportWidth < imageWidth) {
//        imageWidth = viewportWidth * 0.98;/*UN 95% del espacio disponible*/
//        imageHeight = imageWidth * imageProportion;
//        adjustFactor = imageWidth / graphicalOptions.getImageWidth();
//    }
//
//    var elemAux;
//    for (var i in featureSetViews) {
//        for (var j in featureSetViews[i].items) {
//            elemAux = featureSetViews[i].items[j];
//            if (elemAux.getID() === nodeID) {
//                elemAux = elemAux.getPopUpInformation(graphicalOptions.getVisibleOmics(), adjustFactor);
//                generateToolTip(elemAux.name, elemAux.values, elemAux.x, elemAux.y, pathwayView.minMaxValues, nodeID + "_popup", $("#" + pathwayView.getComponent().id + " svg").attr("id"))
//            }
//        }
//    }
//};
//var hideToolTip = function (elementID) {
//    var el = document.getElementById(elementID + "_popup");
//    el.parentNode.removeChild(el);
//};
//var generateToolTip = function (geneName, omicValues, xPos, yPos, minMaxValues, elementID, canvasID) {
//    var svgns = 'http://www.w3.org/2000/svg';
//    var group = document.createElementNS(svgns, "g");
//    var textNode, boxNode, pathNode, values, backgroundElement;
//    var fontSize = 12, margin = 5;
//    group.setAttribute('id', elementID);
//    group.setAttribute("x", xPos);
//    group.setAttribute("y", yPos);
//
//    //CREATE THE NODE FOR THE BACKGROUND
//    backgroundElement = document.createElementNS(svgns, "rect");
////    rect.setAttribute("fill-opacity", opacity);
//    backgroundElement.setAttribute("x", xPos);
//    backgroundElement.setAttribute("y", yPos);
//    backgroundElement.setAttribute("width", 0);
//    backgroundElement.setAttribute("height", 0);
//    backgroundElement.setAttribute("fill", "white");
//    backgroundElement.setAttribute("stroke", "black");
//    group.appendChild(backgroundElement);
//
//    //MOVE THE CURSOR TO DRAWTHE TEXT INSIDE THE BOX
//    yPos += fontSize + margin;
//    //ADD MARGIN
//    xPos += margin;
//    //WRITE THE NAME FOR THE GENE
//    textNode = document.createElementNS(svgns, "text");
//    textNode.setAttribute("x", xPos);
//    textNode.setAttribute("y", yPos);
//    textNode.setAttribute("font-size", fontSize);
//    textNode.setAttribute("font-family", "monospace");
//    textNode.appendChild(document.createTextNode(geneName));
//    group.appendChild(textNode);
//    yPos += fontSize;
//
//    fontSize = 10;
//    textNode = document.createElementNS(svgns, "text");
//    textNode.setAttribute("x", xPos);
//    textNode.setAttribute("y", yPos);
//    textNode.setAttribute("font-size", fontSize);
//    textNode.setAttribute("font-family", "monospace");
//    textNode.appendChild(document.createTextNode("(double click to view in detail)"));
//    group.appendChild(textNode);
//
//    yPos += fontSize;
//    fontSize = 10;
//    //FOR EACH SELECTED OMIC, PRINT THE VALUES
//    var yPosAux, maxYPos = -1, maxLength = -1;
//    for (var omicName in omicValues) {
//        yPosAux = yPos;
//        textNode = document.createElementNS(svgns, "text");
//        textNode.setAttribute("x", xPos);
//        textNode.setAttribute("y", yPosAux);
//        textNode.setAttribute("font-size", fontSize);
//        textNode.setAttribute("font-family", "monospace");
//        textNode.appendChild(document.createTextNode(omicName));
//        group.appendChild(textNode);
//        values = omicValues[omicName];
//        yPosAux += fontSize + margin;
//
//        maxLength = omicName.length;
//
//        if (values === "No data") {
//            textNode = document.createElementNS(svgns, "text");
//            textNode.setAttribute("x", xPos);
//            textNode.setAttribute("y", yPosAux);
//            textNode.setAttribute("font-size", fontSize);
//            textNode.setAttribute("font-family", "monospace");
//            textNode.appendChild(document.createTextNode(values));
//            group.appendChild(textNode);
//        } else {
//            for (var i in values) {
//                boxNode = document.createElementNS(svgns, "rect");
////            rect.setAttribute("fill-opacity", opacity);
//                boxNode.setAttribute("x", xPos);
//                boxNode.setAttribute("y", yPosAux - 10);
//                boxNode.setAttribute("width", 10);
//                boxNode.setAttribute("height", 10);
//                boxNode.setAttribute("fill", getColor(minMaxValues[0][omicName], minMaxValues[1][omicName], values[i]));
//                boxNode.setAttribute("stroke", "black");
//                group.appendChild(boxNode);
//
//                textNode = document.createElementNS(svgns, "text");
//                textNode.setAttribute("x", xPos + 15);
//                textNode.setAttribute("y", yPosAux);
//                textNode.setAttribute("font-size", fontSize);
//                textNode.setAttribute("font-family", "monospace");
//                textNode.appendChild(document.createTextNode(values[i].toFixed(4)));
//                group.appendChild(textNode);
//
//                yPosAux += fontSize + margin;
//
//                maxLength = Math.max(maxLength, ("" + values[i].toFixed(4)).length);
//            }
//        }
//
//        xPos += (maxLength + margin) * fontSize / 2;
//
//        pathNode = document.createElementNS(svgns, "line");
//        pathNode.setAttribute("x1", xPos);
//        pathNode.setAttribute("y1", yPos - 10);
//        pathNode.setAttribute("x2", xPos)
//        pathNode.setAttribute("y2", yPosAux);
//        pathNode.setAttribute("stroke", "#d3d3d3");
//        pathNode.setAttribute("stroke-width", "1px");
//        group.appendChild(pathNode);
//
//        xPos += (margin);
//
//        maxYPos = Math.max(maxYPos, yPosAux);
//    }
//
//
//    group.appendChild(textNode);
//    backgroundElement.setAttribute("width", xPos - group.getAttribute("x"));
//    backgroundElement.setAttribute("height", maxYPos - group.getAttribute("y"));
//
//    document.getElementById(canvasID).appendChild(group);
//};


//var showCompleteDataDialog = function (toolTipId) {
//    $("#" + toolTipId).css("display", "none");
//};
//var hideCompleteDataDialog = function (elementID) {
//    var el = document.getElementById(elementID);
//    el.parentNode.removeChild(el);
//};

function JobController(){this.checkJobStatus=function(jobID,jobView,callback,other){other=other||{};var errorHandler=other.errorHandler||ajaxErrorHandler;var me=this;console.info("Checking status for Job "+jobID);$.ajax({type:"POST",headers:{"Content-Encoding":"gzip"},url:SERVER_URL_JOB_STATUS+"/"+jobID,success:function(response){if(response.success===false){if(response.status==="JobStatus.STARTED"||response.status==="started"){showInfoMessage("Running job "+jobID+"...",{logMessage:"Job "+jobID+" still running.",showSpin:true,append:other.multipleJobs,itemId:jobID,icon:"play"})}setTimeout(function(){me.checkJobStatus(jobID,jobView,callback,other)},CHECK_STATUS_TIMEOUT)}else{callback(response,jobID,jobView,other)}},error:function(response){errorHandler(response,jobID,jobView,other)}})};this.step1SubmitRegionBasedOmics=function(jobView,regionBasedOmics){jobView.pendingRequests=0;jobView.runningRequests=0;jobView.failedRequests=0;var me=this;if(jobView.checkForm()===true){var URL=SERVER_URL_DM_FROMBED2GENES;if(jobView.isExampleMode()===true){URL=SERVER_URL_DM_EXAMPLE_FROMBED2GENES}var sendRequest=function(jobView,regionBasedOmics){var subview=regionBasedOmics.shift();subview.remove(subview.queryById("errorMessage"));var itemsContainer=subview.queryById("itemsContainer");var temporalForm=Ext.widget({xtype:"form",items:[itemsContainer]});jobView.pendingRequests++;temporalForm.getForm().submit({method:"POST",url:URL,success:function(form,action){var response=JSON.parse(action.response.responseText);showInfoMessage("Job "+response.jobID+" is waiting at job queue...",{logMessage:"Now Job is in the queue...",showSpin:true,append:true,itemId:response.jobID,icon:"clock-o"});subview.add(temporalForm.queryById("itemsContainer"));Ext.destroy(temporalForm);var callback=function(response,jobID,jobView,other){showInfoMessage("Job "+jobID+" finished successfully.",{logMessage:"Job "+jobID+" finished.",showSpin:true,append:true,itemId:jobID,icon:"check-circle-o"});jobView.pendingRequests--;other.subview.setContent("itemsContainerAlt",{mainFile:response.mainOutputFileName,secondaryFile:response.secondOutputFileName,title:itemsContainer.queryById("omicNameField").getValue()});if(jobView.pendingRequests===0){if(jobView.failedRequests===0){me.step1OnFormSubmitHandler(jobView)}else{showErrorMessage("Ops!... Something went wrong during BED files processing.",{message:"One or more BED files were not succesfully processed.</br>Please check the form for more info."})}}};var errorHandler=function(response,jobID,jobView,other){showInfoMessage("Job "+jobID+" finished with errors.",{logMessage:"Job "+jobID+" finished.",showSpin:true,append:other.multipleJobs,itemId:jobID,icon:"times-circle-o"});jobView.failedRequests++;jobView.pendingRequests--;var response=JSON.parse(action.response.responseText);other.subview.add(Ext.widget({xtype:"box",itemId:"errorMessage",html:'<h3 style="color: #EC696E;  font-size: 20px;"><i class="fa fa-cog fa-spin"></i> Error when processing the BED file.<br><span style="font-size:14px;">'+response.message+"</span></h3>"}));if(jobView.pendingRequests===0){showErrorMessage("Ops!... Something went wrong during BED files processing.",{message:"One or more BED files were not succesfully processed.</br>Please check the form for more information."})}};me.checkJobStatus(response.jobID,jobView,callback,{subview:subview,errorHandler:errorHandler,multipleJobs:true});if(regionBasedOmics.length>0){sendRequest(jobView,regionBasedOmics)}},failure:extJSErrorHandler})};showInfoMessage("Uploading BED files... ("+jobView.pendingRequests+" pending)",{logMessage:"New Job created, submitting files...",showSpin:true});sendRequest(jobView,regionBasedOmics)}else{showErrorMessage("Invalid form. Please check form errors.",{height:150,width:400});return false}};this.step1OnFormSubmitHandler=function(jobView){var URL=SERVER_URL_PA_STEP1;if(jobView.isExampleMode()===true){URL=SERVER_URL_PA_EXAMPLE_STEP1}if(jobView.checkForm()===true){var me=this;var form=jobView.getComponent().down("form").getForm();showInfoMessage("Uploading files...",{logMessage:"New Job created, submitting files...",showSpin:true});form.submit({method:"POST",url:URL,success:function(form,action){var response=JSON.parse(action.response.responseText);console.log("JOB "+response.jobID+" is queued ");showInfoMessage("Waiting at job queue...",{logMessage:"Now Job is in the queue...",showSpin:true,icon:"clock-o"});var callback=function(response,jobID,jobView){showSuccessMessage("Done",{logMessage:"FILES PROCESSED SUCCESSFULLY"});showInfoMessage("Generating Metabolites list...",{showTimeout:.5,showSpin:true});var jobModel=jobView.getModel();jobModel.setStepNumber(2);jobModel.setJobID(response.jobID);jobModel.setOrganism(response.organism);jobModel.setCompoundBasedInputOmics(response.compoundBasedInputOmics);jobModel.setGeneBasedInputOmics(response.geneBasedInputOmics);jobModel.setFoundCompounds([]);var matchedMetabolites=response.matchedMetabolites;var matchedCompound=null;for(var i in matchedMetabolites){matchedCompound=new CompoundSet;matchedCompound.loadFromJSON(matchedMetabolites[i]);jobModel.addFoundCompound(matchedCompound)}var selectedCompounds={};var auxCompound=null;for(var i in jobModel.foundCompounds){for(var j in jobModel.foundCompounds[i].mainCompounds){matchedCompound=jobModel.foundCompounds[i].mainCompounds[j];auxCompound=selectedCompounds[matchedCompound.getID()]||matchedCompound;if(matchedCompound.similarity>=auxCompound.similarity){auxCompound.selected=false;matchedCompound.selected=true;selectedCompounds[matchedCompound.getID()]=matchedCompound}else{matchedCompound.selected=false}}}me.updateStoredApplicationData("jobModel",jobModel);me.showJobInstance(jobModel);showSuccessMessage("Done",{logMessage:"Generating Metabolites list...DONE",showTimeout:1,closeTimeout:.5})};me.checkJobStatus(response.jobID,jobView,callback)},failure:extJSErrorHandler})}else{showErrorMessage("Invalid form. Please check form errors.",{height:150,width:400,showReportButton:false});return false}};this.step2OnFormSubmitHandler=function(jobView){if(jobView.checkForm()===true){var me=this;showInfoMessage("Obtaining Pathways list...",{logMessage:"Sending new request (get pathway list).",showSpin:true});$.ajax({type:"POST",headers:{"Content-Encoding":"gzip"},url:SERVER_URL_PA_STEP2,data:{jobID:jobView.getModel().getJobID(),selectedCompounds:jobView.getSelectedCompounds()},success:function(response){console.log("JOB "+response.jobID+" is queued ");showInfoMessage("Waiting at job queue...",{logMessage:"Now Job is in the queue...",showSpin:true});var callback=function(response,jobID,jobView){if(response.success===false){var errorMessage="An error occurred getting the pathway list.</br>Please try again later.</br>If the error is repeated, please contact your web administrator.";if(response.errorMessage!==""){errorMessage=response.errorMessage}showErrorMessage(errorMessage);return}showInfoMessage("Updating Pathways list...",{logMessage:"Obtaining Pathways list...DONE",showSpin:true});var jobModel=jobView.getModel();jobModel.setStepNumber(3);jobModel.setCompoundBasedInputOmics(response.compoundBasedInputOmics);jobModel.setGeneBasedInputOmics(response.geneBasedInputOmics);jobModel.setSummary(response.summary);jobModel.setOrganism(response.organism);var pathways=response.pathwaysInfo;var pathway=null;jobModel.setPathways([]);for(var i in pathways){pathway=new Pathway(i);pathway.loadFromJSON(pathways[i]);jobModel.addPathway(pathway)}me.updateStoredApplicationData("jobModel",jobModel);me.showJobInstance(jobModel);showSuccessMessage("Done",{logMessage:"Updating Pathways list...DONE",showTimeout:1,closeTimeout:.5})};me.checkJobStatus(response.jobID,jobView,callback)},error:ajaxErrorHandler})}else{showErrorMessage("At least one compound must be selected. Please check the form.",{height:200,width:400});return false}};this.step3OnFormSubmitHandler=function(jobView,pathwayID){var me=this;var jobModel=jobView.getModel();var pathwayModel=jobModel.getPathway(pathwayID);if(pathwayModel.getGraphicalOptions()===null){showInfoMessage("Fetching Pathway information...",{logMessage:"Sending new request (get pathway information).",showSpin:true});$.ajax({data:{selectedPathways:pathwayID,jobID:jobModel.getJobID()},method:"POST",url:SERVER_URL_PA_STEP3,success:function(response){var graphicalOptionsInstances=response.graphicalOptionsInstances;var graphicalOptionsInstance=null;for(var i in graphicalOptionsInstances){graphicalOptionsInstance=new PathwayGraphicalData;graphicalOptionsInstance.loadFromJSON(graphicalOptionsInstances[i]);jobModel.getPathway(pathwayID).setGraphicalOptions(graphicalOptionsInstance)}var omicsValues=response.omicsValues;var feature=null;for(var i in omicsValues){feature=new Feature(i);feature.loadFromJSON(omicsValues[i]);jobModel.addOmicValue(feature)}me.updateStoredApplicationData("jobModel",jobModel);showSuccessMessage("Done",{logMessage:"Pathway information retrieved successfully",closeTimeout:.4});me.showJobInstance(jobModel,{stepNumber:4}).showPathwayView(pathwayID)},failure:extJSErrorHandler})}else{me.showJobInstance(jobModel,{stepNumber:4}).showPathwayView(pathwayID)}};this.step3GetPathwaysNetworkDataHandler=function(jobView){var me=this;if(window.sessionStorage&&sessionStorage.getItem("pathwaysNetwork")!==null){var pathwaysNetworkData=JSON.parse(sessionStorage.getItem("pathwaysNetwork"));jobView.generateNetwork(pathwaysNetworkData)}else{$.getJSON(SERVER_URL_GET_PATHWAY_NETWORK+"/"+jobView.getModel().getOrganism(),function(pathwaysNetworkData){me.updateStoredApplicationData("pathwaysNetwork",pathwaysNetworkData);jobView.generateNetwork(pathwaysNetworkData)})}};this.recoverPAJobHandler=function(jobID){var me=this;var _recover=function(btn,jobID){if(btn==="ok"&&jobID!==""){showInfoMessage("Loading job information...",{logMessage:"Sending new request (recover job).",showSpin:true});$.ajax({type:"POST",headers:{"Content-Encoding":"gzip"},url:SERVER_URL_PA_RECOVER_JOB,data:{jobID:jobID},success:function(response){if(response.success===false){showErrorMessage(response.errorMessage);return}me.cleanStoredApplicationData();var jobModel=new JobInstance(jobID);jobModel.setStepNumber(3);jobModel.setCompoundBasedInputOmics(response.compoundBasedInputOmics);jobModel.setGeneBasedInputOmics(response.geneBasedInputOmics);jobModel.setSummary(response.summary);jobModel.setOrganism(response.organism);var pathways=response.pathwaysInfo;var pathway=null;jobModel.setPathways([]);for(var i in pathways){pathway=new Pathway(i);pathway.loadFromJSON(pathways[i]);jobModel.addPathway(pathway)}jobModel.isRecoveredJob=true;me.cleanStoredApplicationData();me.updateStoredApplicationData("jobModel",jobModel);var visualOptions=response.visualOptions;if(visualOptions){me.updateStoredApplicationData("visualOptions",visualOptions)}me.showJobInstance(jobModel,{force:true});showSuccessMessage("Done",{logMessage:"Getting Job information...DONE",closeTimeout:1})},error:ajaxErrorHandler})}};if(jobID===undefined){Ext.MessageBox.prompt("Job ID","Please enter the Job ID:",_recover)}else{_recover("ok",jobID)}};this.fromBed2GenesOnFormSubmitHandler=function(jobView){var URL=SERVER_URL_DM_FROMBED2GENES;if(jobView.checkForm()===true){var me=this;var form=jobView.getComponent().down("form").getForm();showInfoMessage("Uploading and processing files...",{logMessage:"New Job created, submitting files...",showSpin:true});form.submit({method:"POST",url:URL,success:function(form,action){var response=JSON.parse(action.response.responseText);console.log("JOB "+response.jobID+" is queued ");showInfoMessage("Waiting at job queue...",{logMessage:"Now Job is in the queue...",showSpin:true});var callback=function(response,jobID,jobView){var jobId=response.jobID;showSuccessMessage("Bed2Genes finished successfully",{message:"Click on the link below to download your files.</br>"+"<b>Note</b> that the main output (quantification at gene level) is now available at your data section.</br>"+"<a href='"+window.location.pathname+SERVER_URL_DM_DOWNLOAD_FILE+"?jobID="+jobId+"&fileName="+response.compressedFileName+"&fileType=job_result'>Download files.</a>",showButton:true})};me.checkJobStatus(response.jobID,jobView,callback)},failure:extJSErrorHandler})}else{showErrorMessage("Invalid form. Please check form errors.",{height:150,width:400,showReportButton:false});return false}};this.fromMiRNA2GenesOnFormSubmitHandler=function(jobView){var URL=SERVER_URL_DM_FROMMIRNA2GENES;if(jobView.checkForm()===true){var me=this;var form=jobView.getComponent().down("form").getForm();showInfoMessage("Uploading and processing files...",{logMessage:"New Job created, submitting files...",showSpin:true});form.submit({method:"POST",url:URL,success:function(form,action){var response=JSON.parse(action.response.responseText);console.log("JOB "+response.jobID+" is queued ");showInfoMessage("Waiting at job queue...",{logMessage:"Now Job is in the queue...",showSpin:true});var callback=function(response,jobID,jobView){var jobId=response.jobID;showSuccessMessage("miRNA2Genes finished successfully",{message:"Click on the link below to download your files.</br>"+"<b>Note</b> that the main output (quantification at gene level) is now available at your data section.</br>"+"<a href='"+window.location.pathname+SERVER_URL_DM_DOWNLOAD_FILE+"?jobID="+jobId+"&fileName="+response.compressedFileName+"&fileType=job_result'>Download files.</a>",showButton:true})};me.checkJobStatus(response.jobID,jobView,callback)},failure:extJSErrorHandler})}else{showErrorMessage("Invalid form. Please check form errors.",{height:150,width:400,showReportButton:false});return false}};this.backButtonClickHandler=function(jobView){var jobModel=jobView.getModel();var me=this;if(jobModel.getStepNumber()>1){showInfoMessage("Loading job information...",{callback:function(){jobModel.setStepNumber(jobModel.getStepNumber()-1);me.updateStoredApplicationData("jobModel",jobModel);me.showJobInstance(jobModel,{doUpdate:false})},closeTimeout:1,showSpin:true})}};this.resetButtonClickHandler=function(jobView,force,callback){var me=this;if(force===true){me.cleanStoredApplicationData();me.showJobInstance(new JobInstance(null));if(callback!==undefined){callback()}return}Ext.MessageBox.confirm("Confirm","Are you sure you want to reset the current job?",function(opcion){if(opcion==="yes"){me.cleanStoredApplicationData();me.showJobInstance(new JobInstance(null));if(callback!==undefined){callback()}}})};this.showJobInstance=function(jobModel,options){var me=this;options=options||{};var stepNumber=options.stepNumber||jobModel.getStepNumber();var doUpdate=options.doUpdate!==false;var callback=options.callback;var force=options.force||false;var jobView=application.getMainView().getSubView("PA_Step"+stepNumber+"JobView");if(jobView!==undefined&&force){jobView.getModel().deleteObserver(jobView);jobView.loadModel(jobModel);jobModel.addObserver(jobView);doUpdate=true}if(jobView===undefined){if(stepNumber===4){jobView=new PA_Step4JobView}else if(stepNumber===3){jobView=new PA_Step3JobView}else if(stepNumber===2){jobView=new PA_Step2JobView}else if(stepNumber===1){jobView=new PA_Step1JobView}jobView.setController(me);jobView.loadModel(jobModel);jobModel.addObserver(jobView);application.getMainView().addMainView(jobView);doUpdate=true}application.getMainView().changeMainView(jobView.getName());if(doUpdate&&jobView.updateObserver!==undefined){console.info(Date.logFormat()+"JobController.js : Updating jobview...");jobView.updateObserver()}return jobView};this.updateStoredVisualOptions=function(jobID,visualOptions){this.updateStoredApplicationData("visualOptions",visualOptions);visualOptions.jobID=jobID;$.ajax({method:"POST",url:SERVER_URL_PA_SAVE_VISUAL_OPTIONS,data:visualOptions,success:function(response){console.info(Date.logFormat()+"Visual options saved succesfully.")},error:function(response){console.error(Date.logFormat()+"failed when saving Visual options.")}})};this.updateStoredApplicationData=function(key,data){if(window.sessionStorage){if(data!=null){var replacerFn=function(key,value){if(key==="observers"||key==="changed"){return}return value};sessionStorage.setItem(key,JSON.stringify(data,replacerFn))}}};this.cleanStoredApplicationData=function(){if(window.sessionStorage){sessionStorage.removeItem("jobModel");sessionStorage.removeItem("pathwaysNetwork");sessionStorage.removeItem("visualOptions");sessionStorage.clear()}application.getMainView().clearSubViews();application.getMainView().showSignInDialog()};this.getCredentialsParams=function(request_params){var credentials={};if(request_params!=null){credentials=request_params}credentials.sessionToken=Ext.util.Cookies.get("sessionToken");credentials.userID=Ext.util.Cookies.get("userID");return credentials}}
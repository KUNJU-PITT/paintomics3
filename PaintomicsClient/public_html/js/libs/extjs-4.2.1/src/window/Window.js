Ext.define("Ext.window.Window",{extend:"Ext.panel.Panel",alternateClassName:"Ext.Window",requires:["Ext.util.ComponentDragger","Ext.util.Region","Ext.EventManager"],alias:"widget.window",baseCls:Ext.baseCSSPrefix+"window",resizable:true,draggable:true,constrain:false,constrainHeader:false,plain:false,minimizable:false,maximizable:false,minHeight:50,minWidth:50,expandOnShow:true,collapsible:false,closable:true,hidden:true,autoRender:true,hideMode:"offsets",floating:true,itemCls:Ext.baseCSSPrefix+"window-item",initialAlphaNum:/^[a-z0-9]/,overlapHeader:true,ignoreHeaderBorderManagement:true,alwaysFramed:true,isRootCfg:{isRoot:true},isWindow:true,initComponent:function(){var me=this;me.frame=false;me.callParent();me.addEvents("resize","maximize","minimize","restore");if(me.plain){me.addClsWithUI("plain")}if(me.modal){me.ariaRole="dialog"}me.addStateEvents(["maximize","restore","resize","dragend"])},getElConfig:function(){var me=this,elConfig;elConfig=me.callParent();elConfig.tabIndex=-1;return elConfig},getState:function(){var me=this,state=me.callParent()||{},maximized=!!me.maximized,ghostBox=me.ghostBox,pos;state.maximized=maximized;if(maximized){pos=me.restorePos}else if(ghostBox){pos=[ghostBox.x,ghostBox.y]}else{pos=me.getPosition()}Ext.apply(state,{size:maximized?me.restoreSize:me.getSize(),pos:pos});return state},applyState:function(state){var me=this;if(state){me.maximized=state.maximized;if(me.maximized){me.hasSavedRestore=true;me.restoreSize=state.size;me.restorePos=state.pos}else{Ext.apply(me,{width:state.size.width,height:state.size.height,x:state.pos[0],y:state.pos[1]})}}},onRender:function(ct,position){var me=this;me.callParent(arguments);me.focusEl=me.el;if(me.maximizable){me.header.on({scope:me,dblclick:me.toggleMaximize})}},afterRender:function(){var me=this,header=me.header,keyMap;me.callParent();if(me.maximized){me.maximized=false;me.maximize();if(header){header.removeCls(header.indicateDragCls)}}if(me.closable){keyMap=me.getKeyMap();keyMap.on(27,me.onEsc,me)}else{keyMap=me.keyMap}if(keyMap&&me.hidden){keyMap.disable()}},initDraggable:function(){this.initSimpleDraggable()},initResizable:function(){this.callParent(arguments);if(this.maximized){this.resizer.disable()}},onEsc:function(k,e){if(!Ext.FocusManager||!Ext.FocusManager.enabled||Ext.FocusManager.focusedCmp===this){e.stopEvent();this.close()}},beforeDestroy:function(){var me=this;if(me.rendered){delete this.animateTarget;me.hide();Ext.destroy(me.keyMap)}me.callParent()},addTools:function(){var me=this;me.callParent();if(me.minimizable){me.addTool({type:"minimize",handler:Ext.Function.bind(me.minimize,me,[])})}if(me.maximizable){me.addTool({type:"maximize",handler:Ext.Function.bind(me.maximize,me,[])});me.addTool({type:"restore",handler:Ext.Function.bind(me.restore,me,[]),hidden:true})}},getFocusEl:function(){return this.getDefaultFocus()},getDefaultFocus:function(){var me=this,result,defaultComp=me.defaultButton||me.defaultFocus,selector;if(defaultComp!==undefined){if(Ext.isNumber(defaultComp)){result=me.query("button")[defaultComp]}else if(Ext.isString(defaultComp)){selector=defaultComp;if(selector.match(me.initialAlphaNum)){result=me.down("#"+selector)}if(!result){result=me.down(selector)}}else if(defaultComp.focus){result=defaultComp}}return result||me.el},onFocus:function(){var me=this,focusDescendant;if(Ext.FocusManager&&Ext.FocusManager.enabled||(focusDescendant=me.getDefaultFocus())===me){me.callParent(arguments)}else{focusDescendant.focus()}},onShow:function(){var me=this;me.callParent(arguments);if(me.expandOnShow){me.expand(false)}me.syncMonitorWindowResize();if(me.keyMap){me.keyMap.enable()}},doClose:function(){var me=this;if(me.hidden){me.fireEvent("close",me);if(me.closeAction=="destroy"){this.destroy()}}else{me.hide(me.animateTarget,me.doClose,me)}},afterHide:function(){var me=this;me.syncMonitorWindowResize();if(me.keyMap){me.keyMap.disable()}me.callParent(arguments)},onWindowResize:function(){var me=this,sizeModel;if(me.maximized){me.fitContainer()}else{sizeModel=me.getSizeModel();if(sizeModel.width.natural||sizeModel.height.natural){me.updateLayout()}me.doConstrain()}},minimize:function(){this.fireEvent("minimize",this);return this},resumeHeaderLayout:function(changed){this.header.resumeLayouts(changed?this.isRootCfg:null)},afterCollapse:function(){var me=this,header=me.header,tools=me.tools;if(header&&me.maximizable){header.suspendLayouts();tools.maximize.hide();tools.restore.hide();this.resumeHeaderLayout(true)}if(me.resizer){me.resizer.disable()}me.callParent(arguments)},afterExpand:function(){var me=this,header=me.header,tools=me.tools,changed;if(header){header.suspendLayouts();if(me.maximized){tools.restore.show();changed=true}else if(me.maximizable){tools.maximize.show();changed=true}this.resumeHeaderLayout(changed)}if(me.resizer){me.resizer.enable()}me.callParent(arguments)},maximize:function(animate){var me=this,header=me.header,tools=me.tools,changed;if(!me.maximized){me.expand(false);if(!me.hasSavedRestore){me.restoreSize=me.getSize();me.restorePos=me.getPosition(true)}if(header){header.suspendLayouts();if(tools.maximize){tools.maximize.hide();changed=true}if(tools.restore){tools.restore.show();changed=true}if(me.collapseTool){me.collapseTool.hide();changed=true}me.resumeHeaderLayout(changed)}me.maximized=true;me.el.disableShadow();if(me.dd){me.dd.disable();if(header){header.removeCls(header.indicateDragCls)}}if(me.resizer){me.resizer.disable()}me.el.addCls(Ext.baseCSSPrefix+"window-maximized");me.container.addCls(Ext.baseCSSPrefix+"window-maximized-ct");me.syncMonitorWindowResize();me.fitContainer(animate=animate||!!me.animateTarget?{callback:function(){me.fireEvent("maximize",me)}}:null);if(!animate){me.fireEvent("maximize",me)}}return me},restore:function(animate){var me=this,tools=me.tools,header=me.header,newBox=me.restoreSize,changed;if(me.maximized){me.hasSavedRestore=null;me.removeCls(Ext.baseCSSPrefix+"window-maximized");if(header){header.suspendLayouts();if(tools.restore){tools.restore.hide();changed=true}if(tools.maximize){tools.maximize.show();changed=true}if(me.collapseTool){me.collapseTool.show();changed=true}me.resumeHeaderLayout(changed)}me.maximized=false;newBox.x=me.restorePos[0];newBox.y=me.restorePos[1];me.setBox(newBox,animate=animate||!!me.animateTarget?{callback:function(){me.el.enableShadow(true);me.fireEvent("restore",me)}}:null);me.restorePos=me.restoreSize=null;if(me.dd){me.dd.enable();if(header){header.addCls(header.indicateDragCls)}}if(me.resizer){me.resizer.enable()}me.container.removeCls(Ext.baseCSSPrefix+"window-maximized-ct");me.syncMonitorWindowResize();if(!animate){me.el.enableShadow(true);me.fireEvent("restore",me)}}return me},syncMonitorWindowResize:function(){var me=this,currentlyMonitoring=me._monitoringResize,yes=me.monitorResize||me.constrain||me.constrainHeader||me.maximized,veto=me.hidden||me.destroying||me.isDestroyed;if(yes&&!veto){if(!currentlyMonitoring){Ext.EventManager.onWindowResize(me.onWindowResize,me,{delay:1});me._monitoringResize=true}}else if(currentlyMonitoring){Ext.EventManager.removeResizeListener(me.onWindowResize,me);me._monitoringResize=false}},toggleMaximize:function(){return this[this.maximized?"restore":"maximize"]()}});
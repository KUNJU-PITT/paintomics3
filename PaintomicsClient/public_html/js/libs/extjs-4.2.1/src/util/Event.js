Ext.define("Ext.util.Event",function(){var arraySlice=Array.prototype.slice,arrayInsert=Ext.Array.insert,toArray=Ext.Array.toArray,DelayedTask=Ext.util.DelayedTask;return{requires:"Ext.util.DelayedTask",isEvent:true,suspended:0,noOptions:{},constructor:function(observable,name){this.name=name;this.observable=observable;this.listeners=[]},addListener:function(fn,scope,options){var me=this,listeners,listener,priority,isNegativePriority,highestNegativePriorityIndex,hasNegativePriorityIndex,length,index,i,listenerPriority;scope=scope||me.observable;if(!fn){Ext.Error.raise({sourceClass:Ext.getClassName(this.observable),sourceMethod:"addListener",msg:"The specified callback function is undefined"})}if(!me.isListening(fn,scope)){listener=me.createListener(fn,scope,options);if(me.firing){me.listeners=me.listeners.slice(0)}listeners=me.listeners;index=length=listeners.length;priority=options&&options.priority;highestNegativePriorityIndex=me._highestNegativePriorityIndex;hasNegativePriorityIndex=highestNegativePriorityIndex!==undefined;if(priority){isNegativePriority=priority<0;if(!isNegativePriority||hasNegativePriorityIndex){for(i=isNegativePriority?highestNegativePriorityIndex:0;i<length;i++){listenerPriority=listeners[i].o?listeners[i].o.priority||0:0;if(listenerPriority<priority){index=i;break}}}else{me._highestNegativePriorityIndex=index}}else if(hasNegativePriorityIndex){index=highestNegativePriorityIndex}if(!isNegativePriority&&index<=highestNegativePriorityIndex){me._highestNegativePriorityIndex++}if(index===length){me.listeners[length]=listener}else{arrayInsert(me.listeners,index,[listener])}}},createListener:function(fn,scope,o){scope=scope||this.observable;var me=this,listener={fn:fn,scope:scope,ev:me},handler=fn;if(o){listener.o=o;if(o.single){handler=me.createSingle(handler,listener,o,scope)}if(o.target){handler=me.createTargeted(handler,listener,o,scope)}if(o.delay){handler=me.createDelayed(handler,listener,o,scope)}if(o.buffer){handler=me.createBuffered(handler,listener,o,scope)}}listener.fireFn=handler;return listener},findListener:function(fn,scope){var listeners=this.listeners,i=listeners.length,listener,s;while(i--){listener=listeners[i];if(listener){s=listener.scope;if(listener.fn==fn&&s==(scope||this.observable)){return i}}}return-1},isListening:function(fn,scope){return this.findListener(fn,scope)!==-1},removeListener:function(fn,scope){var me=this,index,listener,highestNegativePriorityIndex,k;index=me.findListener(fn,scope);if(index!=-1){listener=me.listeners[index];highestNegativePriorityIndex=me._highestNegativePriorityIndex;if(me.firing){me.listeners=me.listeners.slice(0)}if(listener.task){listener.task.cancel();delete listener.task}k=listener.tasks&&listener.tasks.length;if(k){while(k--){listener.tasks[k].cancel()}delete listener.tasks}me.listeners.splice(index,1);if(highestNegativePriorityIndex){if(index<highestNegativePriorityIndex){me._highestNegativePriorityIndex--}else if(index===highestNegativePriorityIndex&&index===me.listeners.length){delete me._highestNegativePriorityIndex}}return true}return false},clearListeners:function(){var listeners=this.listeners,i=listeners.length;while(i--){this.removeListener(listeners[i].fn,listeners[i].scope)}},suspend:function(){this.suspended+=1},resume:function(){if(this.suspended){this.suspended--}},fire:function(){var me=this,listeners=me.listeners,count=listeners.length,i,args,listener,len;if(!me.suspended&&count>0){me.firing=true;args=arguments.length?arraySlice.call(arguments,0):[];len=args.length;for(i=0;i<count;i++){listener=listeners[i];if(listener.o){args[len]=listener.o}if(listener&&listener.fireFn.apply(listener.scope||me.observable,args)===false){return me.firing=false}}}me.firing=false;return true},createTargeted:function(handler,listener,o,scope){return function(){if(o.target===arguments[0]){handler.apply(scope,arguments)}}},createBuffered:function(handler,listener,o,scope){listener.task=new DelayedTask;return function(){listener.task.delay(o.buffer,handler,scope,toArray(arguments))}},createDelayed:function(handler,listener,o,scope){return function(){var task=new DelayedTask;if(!listener.tasks){listener.tasks=[]}listener.tasks.push(task);task.delay(o.delay||10,handler,scope,toArray(arguments))}},createSingle:function(handler,listener,o,scope){return function(){var event=listener.ev;if(event.removeListener(listener.fn,scope)&&event.observable){event.observable.hasListeners[event.name]--}return handler.apply(scope,arguments)}}}});
Ext.define("Ext.util.AbstractMixedCollection",{requires:["Ext.util.Filter"],mixins:{observable:"Ext.util.Observable"},isMixedCollection:true,generation:0,indexGeneration:0,constructor:function(allowFunctions,keyFn){var me=this;if(arguments.length===1&&Ext.isObject(allowFunctions)){me.initialConfig=allowFunctions;Ext.apply(me,allowFunctions)}else{me.allowFunctions=allowFunctions===true;if(keyFn){me.getKey=keyFn}me.initialConfig={allowFunctions:me.allowFunctions,getKey:me.getKey}}me.items=[];me.map={};me.keys=[];me.indexMap={};me.length=0;me.mixins.observable.constructor.call(me)},allowFunctions:false,add:function(key,obj){var len=this.length,out;if(arguments.length===1){out=this.insert(len,key)}else{out=this.insert(len,key,obj)}return out},getKey:function(o){return o.id},replace:function(key,o){var me=this,old,index;if(arguments.length==1){o=arguments[0];key=me.getKey(o)}old=me.map[key];if(typeof key=="undefined"||key===null||typeof old=="undefined"){return me.add(key,o)}me.generation++;index=me.indexOfKey(key);me.items[index]=o;me.map[key]=o;if(me.hasListeners.replace){me.fireEvent("replace",key,old,o)}return o},updateKey:function(oldKey,newKey){var me=this,map=me.map,indexMap=me.indexMap,index=me.indexOfKey(oldKey),item;if(index>-1){item=map[oldKey];delete map[oldKey];delete indexMap[oldKey];map[newKey]=item;indexMap[newKey]=index;me.keys[index]=newKey;me.generation++}},addAll:function(objs){var me=this,key;if(arguments.length>1||Ext.isArray(objs)){me.insert(me.length,arguments.length>1?arguments:objs)}else{for(key in objs){if(objs.hasOwnProperty(key)){if(me.allowFunctions||typeof objs[key]!="function"){me.add(key,objs[key])}}}}},each:function(fn,scope){var items=Ext.Array.push([],this.items),i=0,len=items.length,item;for(;i<len;i++){item=items[i];if(fn.call(scope||item,item,i,len)===false){break}}},eachKey:function(fn,scope){var keys=this.keys,items=this.items,i=0,len=keys.length;for(;i<len;i++){fn.call(scope||window,keys[i],items[i],i,len)}},findBy:function(fn,scope){var keys=this.keys,items=this.items,i=0,len=items.length;for(;i<len;i++){if(fn.call(scope||window,items[i],keys[i])){return items[i]}}return null},find:function(){if(Ext.isDefined(Ext.global.console)){Ext.global.console.warn("Ext.util.MixedCollection: find has been deprecated. Use findBy instead.")}return this.findBy.apply(this,arguments)},insert:function(index,key,obj){var out;if(Ext.isIterable(key)){out=this.doInsert(index,key,obj)}else{if(arguments.length>2){out=this.doInsert(index,[key],[obj])}else{out=this.doInsert(index,[key])}out=out[0]}return out},doInsert:function(index,keys,objects){var me=this,itemKey,removeIndex,i,len=keys.length,deDupedLen=len,fireAdd=me.hasListeners.add,syncIndices,newKeys={},passedDuplicates,oldKeys,oldObjects;if(objects!=null){me.useLinearSearch=true}else{objects=keys;keys=new Array(len);for(i=0;i<len;i++){keys[i]=this.getKey(objects[i])}}me.suspendEvents();for(i=0;i<len;i++){itemKey=keys[i];removeIndex=me.indexOfKey(itemKey);if(removeIndex!==-1){if(removeIndex<index){index--}me.removeAt(removeIndex)}if(itemKey!=null){if(newKeys[itemKey]!=null){passedDuplicates=true;deDupedLen--}newKeys[itemKey]=i}}me.resumeEvents();if(passedDuplicates){oldKeys=keys;oldObjects=objects;keys=new Array(deDupedLen);objects=new Array(deDupedLen);i=0;for(itemKey in newKeys){keys[i]=oldKeys[newKeys[itemKey]];objects[i]=oldObjects[newKeys[itemKey]];i++}len=deDupedLen}syncIndices=index===me.length&&me.indexGeneration===me.generation;Ext.Array.insert(me.items,index,objects);Ext.Array.insert(me.keys,index,keys);me.length+=len;me.generation++;if(syncIndices){me.indexGeneration=me.generation}for(i=0;i<len;i++,index++){itemKey=keys[i];if(itemKey!=null){me.map[itemKey]=objects[i];if(syncIndices){me.indexMap[itemKey]=index}}if(fireAdd){me.fireEvent("add",index,objects[i],itemKey)}}return objects},remove:function(o){var me=this,removeKey,index;if(!me.useLinearSearch&&(removeKey=me.getKey(o))){index=me.indexOfKey(removeKey)}else{index=Ext.Array.indexOf(me.items,o)}return index===-1?false:me.removeAt(index)},removeAll:function(items){var me=this,i;if(items||me.hasListeners.remove){if(items){for(i=items.length-1;i>=0;--i){me.remove(items[i])}}else{while(me.length){me.removeAt(0)}}}else{me.length=me.items.length=me.keys.length=0;me.map={};me.indexMap={};me.generation++;me.indexGeneration=me.generation}},removeAt:function(index){var me=this,o,key;if(index<me.length&&index>=0){me.length--;o=me.items[index];Ext.Array.erase(me.items,index,1);key=me.keys[index];if(typeof key!="undefined"){delete me.map[key]}Ext.Array.erase(me.keys,index,1);if(me.hasListeners.remove){me.fireEvent("remove",o,key)}me.generation++;return o}return false},removeRange:function(index,removeCount){var me=this,o,key,i,limit,syncIndices,trimming;if(index<me.length&&index>=0){if(!removeCount){removeCount=1}limit=Math.min(index+removeCount,me.length);removeCount=limit-index;trimming=limit===me.length;syncIndices=trimming&&me.indexGeneration===me.generation;for(i=index;i<limit;i++){key=me.keys[i];if(key!=null){delete me.map[key];if(syncIndices){delete me.indexMap[key]}}}o=me.items[i-1];me.length-=removeCount;me.generation++;if(syncIndices){me.indexGeneration=me.generation}if(trimming){me.items.length=me.keys.length=me.length}else{me.items.splice(index,removeCount);me.keys.splice(index,removeCount)}return o}return false},removeAtKey:function(key){var me=this,keys=me.keys,i;if(key==null){for(i=keys.length-1;i>=0;i--){if(keys[i]==null){me.removeAt(i)}}}else{return me.removeAt(me.indexOfKey(key))}},getCount:function(){return this.length},indexOf:function(o){var me=this,key;if(o!=null){if(!me.useLinearSearch&&(key=me.getKey(o))){return this.indexOfKey(key)}return Ext.Array.indexOf(me.items,o)}return-1},indexOfKey:function(key){if(!this.map.hasOwnProperty(key)){return-1}if(this.indexGeneration!==this.generation){this.rebuildIndexMap()}return this.indexMap[key]},rebuildIndexMap:function(){var me=this,indexMap=me.indexMap={},keys=me.keys,len=keys.length,i;for(i=0;i<len;i++){indexMap[keys[i]]=i}me.indexGeneration=me.generation},get:function(key){var me=this,mk=me.map[key],item=mk!==undefined?mk:typeof key=="number"?me.items[key]:undefined;return typeof item!="function"||me.allowFunctions?item:null},getAt:function(index){return this.items[index]},getByKey:function(key){return this.map[key]},contains:function(o){var me=this,key;if(o!=null){if(!me.useLinearSearch&&(key=me.getKey(o))){return this.map[key]!=null}return Ext.Array.indexOf(this.items,o)!==-1}return false},containsKey:function(key){return this.map.hasOwnProperty(key)},clear:function(){var me=this;if(me.generation){me.length=0;me.items=[];me.keys=[];me.map={};me.indexMap={};me.generation++;me.indexGeneration=me.generation}if(me.hasListeners.clear){me.fireEvent("clear")}},first:function(){return this.items[0]},last:function(){return this.items[this.length-1]},sum:function(property,root,start,end){var values=this.extractValues(property,root),length=values.length,sum=0,i;start=start||0;end=end||end===0?end:length-1;for(i=start;i<=end;i++){sum+=values[i]}return sum},collect:function(property,root,allowNull){var values=this.extractValues(property,root),length=values.length,hits={},unique=[],value,strValue,i;for(i=0;i<length;i++){value=values[i];strValue=String(value);if((allowNull||!Ext.isEmpty(value))&&!hits[strValue]){hits[strValue]=true;unique.push(value)}}return unique},extractValues:function(property,root){var values=this.items;if(root){values=Ext.Array.pluck(values,root)}return Ext.Array.pluck(values,property)},hasRange:function(start,end){return end<this.length},getRange:function(start,end){var me=this,items=me.items,range=[],len=items.length,tmp,reverse;if(len<1){return range}if(start>end){reverse=true;tmp=start;start=end;end=tmp}if(start<0){start=0}if(end==null||end>=len){end=len-1}range=items.slice(start,end+1);if(reverse&&range.length){range.reverse()}return range},filter:function(property,value,anyMatch,caseSensitive){var filters=[];if(Ext.isString(property)){filters.push(new Ext.util.Filter({property:property,value:value,anyMatch:anyMatch,caseSensitive:caseSensitive}))}else if(Ext.isArray(property)||property instanceof Ext.util.Filter){filters=filters.concat(property)}return this.filterBy(Ext.util.Filter.createFilterFn(filters))},filterBy:function(fn,scope){var me=this,newMC=new me.self(me.initialConfig),keys=me.keys,items=me.items,length=items.length,i;newMC.getKey=me.getKey;for(i=0;i<length;i++){if(fn.call(scope||me,items[i],keys[i])){newMC.add(keys[i],items[i])}}return newMC},findIndex:function(property,value,start,anyMatch,caseSensitive){if(Ext.isEmpty(value,false)){return-1}value=this.createValueMatcher(value,anyMatch,caseSensitive);return this.findIndexBy(function(o){return o&&value.test(o[property])},null,start)},findIndexBy:function(fn,scope,start){var me=this,keys=me.keys,items=me.items,i=start||0,len=items.length;for(;i<len;i++){if(fn.call(scope||me,items[i],keys[i])){return i}}return-1},createValueMatcher:function(value,anyMatch,caseSensitive,exactMatch){if(!value.exec){var er=Ext.String.escapeRegex;value=String(value);if(anyMatch===true){value=er(value)}else{value="^"+er(value);if(exactMatch===true){value+="$"}}value=new RegExp(value,caseSensitive?"":"i")}return value},clone:function(){var me=this,copy=new this.self(me.initialConfig);copy.add(me.keys,me.items);return copy}});
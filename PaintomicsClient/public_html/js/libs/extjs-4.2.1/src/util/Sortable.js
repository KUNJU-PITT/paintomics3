Ext.define("Ext.util.Sortable",{isSortable:true,defaultSortDirection:"ASC",requires:["Ext.util.Sorter"],statics:{createComparator:function(sorters){return sorters&&sorters.length?function(r1,r2){var result=sorters[0].sort(r1,r2),length=sorters.length,i=1;for(;i<length;i++){result=result||sorters[i].sort.call(this,r1,r2)}return result}:function(){return 0}}},initSortable:function(){var me=this,sorters=me.sorters;me.sorters=new Ext.util.AbstractMixedCollection(false,function(item){return item.id||item.property});if(sorters){me.sorters.addAll(me.decodeSorters(sorters))}},sort:function(sorters,direction,where,doSort){var me=this,sorter,newSorters;if(Ext.isArray(sorters)){doSort=where;where=direction;newSorters=sorters}else if(Ext.isObject(sorters)){doSort=where;where=direction;newSorters=[sorters]}else if(Ext.isString(sorters)){sorter=me.sorters.get(sorters);if(!sorter){sorter={property:sorters,direction:direction};newSorters=[sorter]}else if(direction===undefined){sorter.toggle()}else{sorter.setDirection(direction)}}if(newSorters&&newSorters.length){newSorters=me.decodeSorters(newSorters);if(Ext.isString(where)){if(where==="prepend"){me.sorters.insert(0,newSorters)}else{me.sorters.addAll(newSorters)}}else{me.sorters.clear();me.sorters.addAll(newSorters)}}if(doSort!==false){me.fireEvent("beforesort",me,newSorters);me.onBeforeSort(newSorters);sorters=me.sorters.items;if(sorters.length){me.doSort(me.generateComparator())}}return sorters},generateComparator:function(){var sorters=this.sorters.getRange();return sorters.length?this.createComparator(sorters):this.emptyComparator},emptyComparator:function(){return 0},onBeforeSort:Ext.emptyFn,decodeSorters:function(sorters){if(!Ext.isArray(sorters)){if(sorters===undefined){sorters=[]}else{sorters=[sorters]}}var length=sorters.length,Sorter=Ext.util.Sorter,fields=this.model?this.model.prototype.fields:null,field,config,i;for(i=0;i<length;i++){config=sorters[i];if(!(config instanceof Sorter)){if(Ext.isString(config)){config={property:config}}Ext.applyIf(config,{root:this.sortRoot,direction:"ASC"});if(config.fn){config.sorterFn=config.fn}if(typeof config=="function"){config={sorterFn:config}}if(fields&&!config.transform){field=fields.get(config.property);config.transform=field&&field.sortType!==Ext.identityFn?field.sortType:undefined}sorters[i]=new Ext.util.Sorter(config)}}return sorters},getSorters:function(){return this.sorters.items},getFirstSorter:function(){var sorters=this.sorters.items,len=sorters.length,i=0,sorter;for(;i<len;++i){sorter=sorters[i];if(!sorter.isGrouper){return sorter}}return null}},function(){this.prototype.createComparator=this.createComparator});
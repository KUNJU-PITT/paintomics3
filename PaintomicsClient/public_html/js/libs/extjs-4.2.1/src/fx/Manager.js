Ext.define("Ext.fx.Manager",{singleton:true,requires:["Ext.util.MixedCollection","Ext.fx.target.Element","Ext.fx.target.ElementCSS","Ext.fx.target.CompositeElement","Ext.fx.target.CompositeElementCSS","Ext.fx.target.Sprite","Ext.fx.target.CompositeSprite","Ext.fx.target.Component"],mixins:{queue:"Ext.fx.Queue"},constructor:function(){var me=this;me.items=new Ext.util.MixedCollection;me.mixins.queue.constructor.call(me);me.taskRunner=new Ext.util.TaskRunner},interval:16,forceJS:true,createTarget:function(target){var me=this,useCSS3=!me.forceJS&&Ext.supports.Transitions,targetObj;me.useCSS3=useCSS3;if(target){if(target.tagName||Ext.isString(target)||target.isFly){target=Ext.get(target);targetObj=new Ext.fx.target["Element"+(useCSS3?"CSS":"")](target)}else if(target.dom){targetObj=new Ext.fx.target["Element"+(useCSS3?"CSS":"")](target)}else if(target.isComposite){targetObj=new Ext.fx.target["CompositeElement"+(useCSS3?"CSS":"")](target)}else if(target.isSprite){targetObj=new Ext.fx.target.Sprite(target)}else if(target.isCompositeSprite){targetObj=new Ext.fx.target.CompositeSprite(target)}else if(target.isComponent){targetObj=new Ext.fx.target.Component(target)}else if(target.isAnimTarget){return target}else{return null}me.targets.add(targetObj);return targetObj}else{return null}},addAnim:function(anim){var me=this,items=me.items,task=me.task;items.add(anim.id,anim);if(!task&&items.length){task=me.task={run:me.runner,interval:me.interval,scope:me};me.taskRunner.start(task)}},removeAnim:function(anim){var me=this,items=me.items,task=me.task;items.removeAtKey(anim.id);if(task&&!items.length){me.taskRunner.stop(task);delete me.task}},runner:function(){var me=this,items=me.items.getRange(),i=0,len=items.length,anim;me.targetArr={};me.timestamp=new Date;for(;i<len;i++){anim=items[i];if(anim.isReady()){me.startAnim(anim)}}for(i=0;i<len;i++){anim=items[i];if(anim.isRunning()){me.runAnim(anim)}else if(!me.useCSS3){}}me.applyPendingAttrs()},startAnim:function(anim){anim.start(this.timestamp)},runAnim:function(anim){if(!anim){return}var me=this,useCSS3=me.useCSS3&&anim.target.type=="element",elapsedTime=me.timestamp-anim.startTime,lastFrame=elapsedTime>=anim.duration,target,o;target=this.collectTargetData(anim,elapsedTime,useCSS3,lastFrame);if(useCSS3){anim.target.setAttr(target.anims[anim.id].attributes,true);me.collectTargetData(anim,anim.duration,useCSS3,lastFrame);anim.paused=true;target=anim.target.target;if(anim.target.isComposite){target=anim.target.target.last()}o={};o[Ext.supports.CSS3TransitionEnd]=anim.lastFrame;o.scope=anim;o.single=true;target.on(o)}},collectTargetData:function(anim,elapsedTime,useCSS3,isLastFrame){var targetId=anim.target.getId(),target=this.targetArr[targetId];if(!target){target=this.targetArr[targetId]={id:targetId,el:anim.target,anims:{}}}target.anims[anim.id]={id:anim.id,anim:anim,elapsed:elapsedTime,isLastFrame:isLastFrame,attributes:[{duration:anim.duration,easing:useCSS3&&anim.reverse?anim.easingFn.reverse().toCSS3():anim.easing,attrs:anim.runAnim(elapsedTime)}]};return target},applyPendingAttrs:function(){var targetArr=this.targetArr,target,targetId,animWrap,anim,animId;for(targetId in targetArr){if(targetArr.hasOwnProperty(targetId)){target=targetArr[targetId];for(animId in target.anims){if(target.anims.hasOwnProperty(animId)){animWrap=target.anims[animId];anim=animWrap.anim;if(animWrap.attributes&&anim.isRunning()){target.el.setAttr(animWrap.attributes,false,animWrap.isLastFrame);if(animWrap.isLastFrame){anim.lastFrame()}}}}}}}});
Ext.define("Ext.app.Controller",{requires:["Ext.app.EventBus","Ext.ModelManager","Ext.data.StoreManager","Ext.ComponentManager","Ext.app.domain.Global","Ext.app.domain.Component","Ext.app.domain.Store"],uses:["Ext.app.domain.Controller"],mixins:{observable:"Ext.util.Observable"},statics:{strings:{model:{getter:"getModel",upper:"Model"},view:{getter:"getView",upper:"View"},controller:{getter:"getController",upper:"Controller"},store:{getter:"getStore",upper:"Store"}},controllerRegex:/^(.*)\.controller\./,createGetter:function(baseGetter,name){return function(){return this[baseGetter](name)}},getGetterName:function(name,kindUpper){var fn="get",parts=name.split("."),numParts=parts.length,index;for(index=0;index<numParts;index++){fn+=Ext.String.capitalize(parts[index])}fn+=kindUpper;return fn},processDependencies:function(cls,requires,namespace,kind,names){if(!names||!names.length){return}var me=this,strings=me.strings[kind],o,absoluteName,shortName,name,j,subLn,getterName,getter;if(!Ext.isArray(names)){names=[names]}for(j=0,subLn=names.length;j<subLn;j++){name=names[j];o=me.getFullName(name,kind,namespace);absoluteName=o.absoluteName;shortName=o.shortName;requires.push(absoluteName);getterName=me.getGetterName(shortName,strings.upper);cls[getterName]=getter=me.createGetter(strings.getter,name);if(kind!=="controller"){getter["Ext.app.getter"]=true}}},getFullName:function(name,kind,namespace){var shortName=name,sep,absoluteName;if((sep=name.indexOf("@"))>0){shortName=name.substring(0,sep);absoluteName=name.substring(sep+1)+"."+shortName}else if(name.indexOf(".")>0&&(Ext.ClassManager.isCreated(name)||Ext.Loader.isAClassNameWithAKnownPrefix(name))){absoluteName=name}else{if(!namespace){Ext.log.warn("Cannot find namespace for "+kind+" "+name+", "+"assuming it is fully qualified class name")}if(namespace){absoluteName=namespace+"."+kind+"."+name;shortName=name}else{absoluteName=name}}return{absoluteName:absoluteName,shortName:shortName}}},application:null,onClassExtended:function(cls,data,hooks){var onBeforeClassCreated=hooks.onBeforeCreated;hooks.onBeforeCreated=function(cls,data){var Controller=Ext.app.Controller,ctrlRegex=Controller.controllerRegex,requires=[],className,namespace,requires,proto,match;proto=cls.prototype;className=Ext.getClassName(cls);namespace=data.$namespace||Ext.app.getNamespace(className)||(match=ctrlRegex.exec(className))&&match[1];if(namespace){proto.$namespace=namespace}else{Ext.log.warn("Missing namespace for "+className+", please define it "+"in namespaces property of your Application class.")}Controller.processDependencies(proto,requires,namespace,"model",data.models);Controller.processDependencies(proto,requires,namespace,"view",data.views);Controller.processDependencies(proto,requires,namespace,"store",data.stores);Controller.processDependencies(proto,requires,namespace,"controller",data.controllers);Ext.require(requires,Ext.Function.pass(onBeforeClassCreated,arguments,this))}},constructor:function(config){var me=this;me.mixins.observable.constructor.call(me,config);if(me.refs){me.ref(me.refs)}me.eventbus=Ext.app.EventBus;me.initAutoGetters()},initAutoGetters:function(){var proto=this.self.prototype,prop,fn;for(prop in proto){fn=proto[prop];if(fn&&fn["Ext.app.getter"]){fn.call(this)}}},doInit:function(app){var me=this;if(!me._initialized){me.init(app);me._initialized=true}},finishInit:function(app){var me=this,controllers=me.controllers,controller,i,l;if(me._initialized&&controllers&&controllers.length){for(i=0,l=controllers.length;i<l;i++){controller=me.getController(controllers[i]);controller.finishInit(app)}}},init:Ext.emptyFn,onLaunch:Ext.emptyFn,ref:function(refs){var me=this,i=0,length=refs.length,info,ref,fn;refs=Ext.Array.from(refs);me.references=me.references||[];for(;i<length;i++){info=refs[i];ref=info.ref;fn="get"+Ext.String.capitalize(ref);if(!me[fn]){me[fn]=Ext.Function.pass(me.getRef,[ref,info],me)}me.references.push(ref.toLowerCase())}},addRef:function(refs){this.ref(refs)},getRef:function(ref,info,config){var me=this,refCache=me.refCache||(me.refCache={}),cached=refCache[ref];info=info||{};config=config||{};Ext.apply(info,config);if(info.forceCreate){return Ext.ComponentManager.create(info,"component")}if(!cached){if(info.selector){refCache[ref]=cached=Ext.ComponentQuery.query(info.selector)[0]}if(!cached&&info.autoCreate){refCache[ref]=cached=Ext.ComponentManager.create(info,"component")}if(cached){cached.on("beforedestroy",function(){refCache[ref]=null})}}return cached},hasRef:function(ref){var references=this.references;return references&&Ext.Array.indexOf(references,ref.toLowerCase())!==-1},control:function(selectors,listeners,controller){var me=this,ctrl=controller,obj;if(Ext.isString(selectors)){obj={};obj[selectors]=listeners}else{obj=selectors;ctrl=listeners}me.eventbus.control(obj,ctrl||me)},listen:function(to,controller){this.eventbus.listen(to,controller||this)},getController:function(id){var me=this,app=me.application;if(id===me.id){return me}return app&&app.getController(id)},getStore:function(name){var storeId,store;storeId=name.indexOf("@")==-1?name:name.split("@")[0];store=Ext.StoreManager.get(storeId);if(!store){name=Ext.app.Controller.getFullName(name,"store",this.$namespace);if(name){store=Ext.create(name.absoluteName,{storeId:storeId})}}return store},getModel:function(model){var name=Ext.app.Controller.getFullName(model,"model",this.$namespace);return name&&Ext.ModelManager.getModel(name.absoluteName)},getView:function(view){var name=Ext.app.Controller.getFullName(view,"view",this.$namespace);return name&&Ext.ClassManager.get(name.absoluteName)},getApplication:function(){return this.application}});
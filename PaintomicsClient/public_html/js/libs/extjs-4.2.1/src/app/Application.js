Ext.define("Ext.app.Application",{extend:"Ext.app.Controller",requires:["Ext.tip.QuickTipManager"],scope:undefined,enableQuickTips:true,appFolder:"app",appProperty:"app",namespaces:[],autoCreateViewport:false,paths:null,onClassExtended:function(cls,data,hooks){var Controller=Ext.app.Controller,proto=cls.prototype,requires=[],onBeforeClassCreated,paths,namespace,ns,appFolder;namespace=data.name||cls.superclass.name;appFolder=data.appFolder||cls.superclass.appFolder;if(namespace){data.$namespace=namespace;Ext.app.addNamespaces(namespace)}if(data.namespaces){Ext.app.addNamespaces(data.namespaces)}if(!data["paths processed"]){if(namespace&&appFolder){Ext.Loader.setPath(namespace,appFolder)}paths=data.paths;if(paths){for(ns in paths){if(paths.hasOwnProperty(ns)){Ext.Loader.setPath(ns,paths[ns])}}}}else{delete data["paths processed"]}if(data.autoCreateViewport){if(!namespace){Ext.Error.raise("[Ext.app.Application] Can't resolve namespace for "+data.$className+", did you forget to specify 'name' property?")}Controller.processDependencies(proto,requires,namespace,"view",["Viewport"])}if(requires.length){onBeforeClassCreated=hooks.onBeforeCreated;hooks.onBeforeCreated=function(cls,data){var args=Ext.Array.clone(arguments);Ext.require(requires,function(){return onBeforeClassCreated.apply(this,args)})}}},constructor:function(config){var me=this;if(Ext.isEmpty(me.name)){Ext.Error.raise("[Ext.app.Application] Name property is required")}me.callParent(arguments);me.doInit(me);me.initNamespace();me.initControllers();me.onBeforeLaunch();me.finishInitControllers()},initNamespace:function(){var me=this,appProperty=me.appProperty,ns;ns=Ext.namespace(me.name);if(ns){ns.getApplication=function(){return me};if(appProperty){if(!ns[appProperty]){ns[appProperty]=me}else if(ns[appProperty]!==me){Ext.log.warn("An existing reference is being overwritten for "+name+"."+appProperty+". See the appProperty config.")}}}},initControllers:function(){var me=this,controllers=Ext.Array.from(me.controllers);me.controllers=new Ext.util.MixedCollection;for(var i=0,ln=controllers.length;i<ln;i++){me.getController(controllers[i])}},finishInitControllers:function(){var me=this,controllers,i,l;controllers=me.controllers.getRange();for(i=0,l=controllers.length;i<l;i++){controllers[i].finishInit(me)}},launch:Ext.emptyFn,onBeforeLaunch:function(){var me=this,controllers,c,cLen,controller;if(me.enableQuickTips){me.initQuickTips()}if(me.autoCreateViewport){me.initViewport()}me.launch.call(me.scope||me);me.launched=true;me.fireEvent("launch",me);controllers=me.controllers.items;cLen=controllers.length;for(c=0;c<cLen;c++){controller=controllers[c];controller.onLaunch(me)}},getModuleClassName:function(name,kind){return Ext.app.Controller.getFullName(name,kind,this.name).absoluteName},initQuickTips:function(){Ext.tip.QuickTipManager.init()},initViewport:function(){var viewport=this.getView("Viewport");if(viewport){viewport.create()}},getController:function(name){var me=this,controllers=me.controllers,className,controller;controller=controllers.get(name);if(!controller){className=me.getModuleClassName(name,"controller");controller=Ext.create(className,{application:me,id:name});controllers.add(controller);if(me._initialized){controller.doInit(me)}}return controller},getApplication:function(){return this}});
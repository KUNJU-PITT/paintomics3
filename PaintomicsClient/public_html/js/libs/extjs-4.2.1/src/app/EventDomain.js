Ext.define("Ext.app.EventDomain",{requires:["Ext.util.Event"],statics:{instances:{}},isEventDomain:true,constructor:function(){var me=this;Ext.app.EventDomain.instances[me.type]=me;me.bus={};me.monitoredClasses=[]},dispatch:function(target,ev,args){var me=this,bus=me.bus,selectors=bus[ev],selector,controllers,id,events,event,i,ln;if(!selectors){return true}for(selector in selectors){if(selectors.hasOwnProperty(selector)&&me.match(target,selector)){controllers=selectors[selector];for(id in controllers){if(controllers.hasOwnProperty(id)){events=controllers[id];for(i=0,ln=events.length;i<ln;i++){event=events[i];if(event.fire.apply(event,args)===false){return false}}}}}}return true},listen:function(selectors,controller){var me=this,bus=me.bus,idProperty=me.idProperty,monitoredClasses=me.monitoredClasses,monitoredClassesCount=monitoredClasses.length,i,tree,list,selector,options,listener,scope,event,listeners,ev;for(selector in selectors){if(selectors.hasOwnProperty(selector)&&(listeners=selectors[selector])){if(idProperty){if(!/^[*#]/.test(selector)){Ext.Error.raise("Selectors containing id should begin with #")}selector=selector==="*"?selector:selector.substring(1)}for(ev in listeners){if(listeners.hasOwnProperty(ev)){options=null;listener=listeners[ev];scope=controller;event=new Ext.util.Event(controller,ev);if(Ext.isObject(listener)){options=listener;listener=options.fn;scope=options.scope||controller;delete options.fn;delete options.scope}if(typeof listener==="string"){listener=scope[listener]}event.addListener(listener,scope,options);for(i=monitoredClassesCount;i-- >0;){monitoredClasses[i].hasListeners._incr_(ev)}tree=bus[ev]||(bus[ev]={});tree=tree[selector]||(tree[selector]={});list=tree[controller.id]||(tree[controller.id]=[]);list.push(event)}}}}},match:function(target,selector){var idProperty=this.idProperty;if(idProperty){return selector==="*"||target[idProperty]===selector}return false},monitor:function(observable){var domain=this,prototype=observable.isInstance?observable:observable.prototype,fireEventArgs=prototype.fireEventArgs;domain.monitoredClasses.push(observable);prototype.fireEventArgs=function(ev,args){var ret=fireEventArgs.apply(this,arguments);if(ret!==false){ret=domain.dispatch(this,ev,args)}return ret}},unlisten:function(controllerId){var bus=this.bus,controllers,ev,selector,selectors;for(ev in bus){if(bus.hasOwnProperty(ev)&&(selectors=bus[ev])){for(selector in selectors){controllers=selectors[selector];delete controllers[controllerId]}}}}});
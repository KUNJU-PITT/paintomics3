Ext.define("Ext.grid.plugin.Editing",{alias:"editing.editing",extend:"Ext.AbstractPlugin",requires:["Ext.grid.column.Column","Ext.util.KeyNav"],mixins:{observable:"Ext.util.Observable"},clicksToEdit:2,triggerEvent:undefined,relayedEvents:["beforeedit","edit","validateedit","canceledit"],defaultFieldXType:"textfield",editStyle:"",constructor:function(config){var me=this;me.addEvents("beforeedit","edit","validateedit","canceledit");me.callParent(arguments);me.mixins.observable.constructor.call(me);me.on("edit",function(editor,e){me.fireEvent("afteredit",editor,e)})},init:function(grid){var me=this;me.grid=grid;me.view=grid.view;me.initEvents();me.mon(grid,{reconfigure:me.onReconfigure,scope:me,beforerender:{fn:me.onReconfigure,single:true,scope:me}});grid.relayEvents(me,me.relayedEvents);if(me.grid.ownerLockable){me.grid.ownerLockable.relayEvents(me,me.relayedEvents)}grid.isEditable=true;grid.editingPlugin=grid.view.editingPlugin=me},onReconfigure:function(){var grid=this.grid;grid=grid.ownerLockable?grid.ownerLockable:grid;this.initFieldAccessors(grid.getView().getGridColumns())},destroy:function(){var me=this,grid=me.grid;Ext.destroy(me.keyNav);me.clearListeners();if(grid){me.removeFieldAccessors(grid.columnManager.getColumns());grid.editingPlugin=grid.view.editingPlugin=me.grid=me.view=me.editor=me.keyNav=null}},getEditStyle:function(){return this.editStyle},initFieldAccessors:function(columns){if(columns.isGroupHeader){columns=columns.getGridColumns()}else if(!Ext.isArray(columns)){columns=[columns]}var me=this,c,cLen=columns.length,column;for(c=0;c<cLen;c++){column=columns[c];if(!column.getEditor){column.getEditor=function(record,defaultField){return me.getColumnField(this,defaultField)}}if(!column.hasEditor){column.hasEditor=function(){return me.hasColumnField(this)}}if(!column.setEditor){column.setEditor=function(field){me.setColumnField(this,field)}}}},removeFieldAccessors:function(columns){if(columns.isGroupHeader){columns=columns.getGridColumns()}else if(!Ext.isArray(columns)){columns=[columns]}var c,cLen=columns.length,column;for(c=0;c<cLen;c++){column=columns[c];column.getEditor=column.hasEditor=column.setEditor=null}},getColumnField:function(columnHeader,defaultField){var field=columnHeader.field;if(!(field&&field.isFormField)){field=columnHeader.field=this.createColumnField(columnHeader,defaultField)}return field},hasColumnField:function(columnHeader){return!!columnHeader.field},setColumnField:function(columnHeader,field){columnHeader.field=field;columnHeader.field=this.createColumnField(columnHeader)},createColumnField:function(columnHeader,defaultField){var field=columnHeader.field;if(!field&&columnHeader.editor){field=columnHeader.editor;columnHeader.editor=null}if(!field&&defaultField){field=defaultField}if(field){if(field.isFormField){field.column=columnHeader}else{if(Ext.isString(field)){field={name:columnHeader.dataIndex,xtype:field,column:columnHeader}}else{field=Ext.apply({name:columnHeader.dataIndex,column:columnHeader},field)}field=Ext.ComponentManager.create(field,this.defaultFieldXType)}columnHeader.field=field}return field},initEvents:function(){var me=this;me.initEditTriggers();me.initCancelTriggers()},initCancelTriggers:Ext.emptyFn,initEditTriggers:function(){var me=this,view=me.view;if(me.triggerEvent=="cellfocus"){me.mon(view,"cellfocus",me.onCellFocus,me)}else if(me.triggerEvent=="rowfocus"){me.mon(view,"rowfocus",me.onRowFocus,me)}else{if(view.getSelectionModel().isCellModel){view.onCellFocus=Ext.Function.bind(me.beforeViewCellFocus,me)}me.mon(view,me.triggerEvent||"cell"+(me.clicksToEdit===1?"click":"dblclick"),me.onCellClick,me)}me.initAddRemoveHeaderEvents();view.on("render",me.initKeyNavHeaderEvents,me,{single:true})},beforeViewCellFocus:function(position){if(this.view.selModel.keyNavigation||!this.editing||!this.isCellEditable||!this.isCellEditable(position.row,position.columnHeader)){this.view.focusCell.apply(this.view,arguments)}},onRowFocus:function(record,row,rowIdx){this.startEdit(row,0)},onCellFocus:function(record,cell,position){this.startEdit(position.row,position.column)},onCellClick:function(view,cell,colIdx,record,row,rowIdx,e){if(!view.expanderSelector||!e.getTarget(view.expanderSelector)){this.startEdit(record,view.ownerCt.columnManager.getHeaderAtIndex(colIdx))}},initAddRemoveHeaderEvents:function(){var me=this;me.mon(me.grid.headerCt,{scope:me,add:me.onColumnAdd,remove:me.onColumnRemove,columnmove:me.onColumnMove})},initKeyNavHeaderEvents:function(){var me=this;me.keyNav=Ext.create("Ext.util.KeyNav",me.view.el,{enter:me.onEnterKey,esc:me.onEscKey,scope:me})},onColumnAdd:function(ct,column){this.initFieldAccessors(column)},onColumnRemove:function(ct,column){this.removeFieldAccessors(column)},onColumnMove:function(headerCt,column,fromIdx,toIdx){this.initFieldAccessors(column)},onEnterKey:function(e){var me=this,grid=me.grid,selModel=grid.getSelectionModel(),record,pos,columnHeader;if(selModel.getCurrentPosition&&(pos=selModel.getCurrentPosition())){record=pos.record;columnHeader=pos.columnHeader}else{record=selModel.getLastSelected();columnHeader=grid.columnManager.getHeaderAtIndex(0)}if(record&&columnHeader){me.startEdit(record,columnHeader)}},onEscKey:function(e){return this.cancelEdit()},beforeEdit:Ext.emptyFn,startEdit:function(record,columnHeader){var me=this,context,layoutView=me.grid.lockable?me.grid:me.view;if(!layoutView.componentLayoutCounter){layoutView.on({boxready:Ext.Function.bind(me.startEdit,me,[record,columnHeader]),single:true});return false}if(me.grid.collapsed||!me.grid.view.isVisible(true)){return false}context=me.getEditingContext(record,columnHeader);if(context==null){return false}if(!me.preventBeforeCheck){if(me.beforeEdit(context)===false||me.fireEvent("beforeedit",me,context)===false||context.cancel){return false}}me.editing=true;return context},getEditingContext:function(record,columnHeader){var me=this,grid=me.grid,view=me.view,gridRow=view.getNode(record,true),rowIdx,colIdx;if(!gridRow){return}columnHeader=grid.columnManager.getVisibleHeaderClosestToIndex(Ext.isNumber(columnHeader)?columnHeader:columnHeader.getVisibleIndex());if(!columnHeader){return}colIdx=columnHeader.getVisibleIndex();if(Ext.isNumber(record)){rowIdx=record;record=view.getRecord(gridRow)}else{rowIdx=view.indexOf(gridRow)}if(!record){return}return{grid:grid,view:view,store:view.dataSource,record:record,field:columnHeader.dataIndex,value:record.get(columnHeader.dataIndex),row:gridRow,column:columnHeader,rowIdx:rowIdx,colIdx:colIdx}},cancelEdit:function(){var me=this;me.editing=false;me.fireEvent("canceledit",me,me.context)},completeEdit:function(){var me=this;if(me.editing&&me.validateEdit()){me.fireEvent("edit",me,me.context)}me.context=null;me.editing=false},validateEdit:function(){var me=this,context=me.context;return me.fireEvent("validateedit",me,context)!==false&&!context.cancel}});
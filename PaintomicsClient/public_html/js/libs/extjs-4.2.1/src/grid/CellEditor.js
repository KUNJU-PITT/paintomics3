Ext.define("Ext.grid.CellEditor",{extend:"Ext.Editor",constructor:function(config){config=Ext.apply({},config);if(config.field){config.field.monitorTab=false}this.callParent([config])},onShow:function(){var me=this,innerCell=me.boundEl.first();if(innerCell){if(me.isForTree){innerCell=innerCell.child(me.treeNodeSelector)}innerCell.hide()}me.callParent(arguments)},onHide:function(){var me=this,innerCell=me.boundEl.first();if(innerCell){if(me.isForTree){innerCell=innerCell.child(me.treeNodeSelector)}innerCell.show()}me.callParent(arguments)},afterRender:function(){var me=this,field=me.field;me.callParent(arguments);if(field.isCheckbox){field.mon(field.inputEl,{mousedown:me.onCheckBoxMouseDown,click:me.onCheckBoxClick,scope:me})}},onCheckBoxMouseDown:function(){this.completeEdit=Ext.emptyFn},onCheckBoxClick:function(){delete this.completeEdit;this.field.focus(false,10)},realign:function(autoSize){var me=this,boundEl=me.boundEl,innerCell=boundEl.first(),width=boundEl.getWidth(),offsets=Ext.Array.clone(me.offsets),grid=me.grid,xOffset;if(me.isForTree){xOffset=me.getTreeNodeOffset(innerCell);width-=Math.abs(xOffset);offsets[0]+=xOffset}if(grid.columnLines){width-=boundEl.getBorderWidth("rl")}if(autoSize===true){me.field.setWidth(width)}me.alignTo(innerCell,me.alignment,offsets)},getTreeNodeOffset:function(innerCell){return innerCell.child(this.treeNodeSelector).getOffsetsTo(innerCell)[0]},onEditorTab:function(e){var field=this.field;if(field.onEditorTab){field.onEditorTab(e)}},alignment:"l-l",hideEl:false,cls:Ext.baseCSSPrefix+"small-editor "+Ext.baseCSSPrefix+"grid-editor "+Ext.baseCSSPrefix+"grid-cell-editor",treeNodeSelector:"."+Ext.baseCSSPrefix+"tree-node-text",shim:false,shadow:false});
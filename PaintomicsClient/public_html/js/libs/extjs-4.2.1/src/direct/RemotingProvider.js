Ext.define("Ext.direct.RemotingProvider",{extend:"Ext.direct.JsonProvider",alias:"direct.remotingprovider",requires:["Ext.util.MixedCollection","Ext.util.DelayedTask","Ext.direct.Transaction","Ext.direct.RemotingMethod"],enableBuffer:10,maxRetries:1,constructor:function(config){var me=this;me.callParent(arguments);me.addEvents("beforecall","call","beforecallback");me.namespace=Ext.isString(me.namespace)?Ext.ns(me.namespace):me.namespace||Ext.global;me.transactions=new Ext.util.MixedCollection;me.callBuffer=[]},getNamespace:function(root,action){var parts,ns,i,l;root=root||Ext.global;parts=action.toString().split(".");for(i=0,l=parts.length;i<l;i++){ns=parts[i];root=root[ns];if(typeof root==="undefined"){return root}}return root},createNamespaces:function(root,action){var parts,ns;root=root||Ext.global;parts=action.toString().split(".");for(var i=0,l=parts.length;i<l;i++){ns=parts[i];root[ns]=root[ns]||{};root=root[ns]}return root},initAPI:function(){var me=this,actions=me.actions,namespace=me.namespace,action,cls,methods,i,len,method;for(action in actions){if(actions.hasOwnProperty(action)){if(me.disableNestedActions){cls=namespace[action];if(!cls){cls=namespace[action]={}}}else{cls=me.getNamespace(namespace,action);if(!cls){cls=me.createNamespaces(namespace,action)}}methods=actions[action];for(i=0,len=methods.length;i<len;++i){method=new Ext.direct.RemotingMethod(methods[i]);cls[method.name]=me.createHandler(action,method)}}}},createHandler:function(action,method){var me=this,slice=Array.prototype.slice,handler;if(!method.formHandler){handler=function(){me.configureRequest(action,method,slice.call(arguments,0))}}else{handler=function(form,callback,scope){me.configureFormRequest(action,method,form,callback,scope)}}handler.directCfg={action:action,method:method};return handler},isConnected:function(){return!!this.connected},connect:function(){var me=this;if(me.url){me.initAPI();me.connected=true;me.fireEvent("connect",me)}else if(!me.url){Ext.Error.raise('Error initializing RemotingProvider "'+me.id+'", no url configured.')}},disconnect:function(){var me=this;if(me.connected){me.connected=false;me.fireEvent("disconnect",me)}},runCallback:function(transaction,event){var success=!!event.status,funcName=success?"success":"failure",callback,options,result;if(transaction&&transaction.callback){callback=transaction.callback;options=transaction.callbackOptions;result=typeof event.result!=="undefined"?event.result:event.data;if(Ext.isFunction(callback)){callback(result,event,success,options)}else{Ext.callback(callback[funcName],callback.scope,[result,event,success,options]);Ext.callback(callback.callback,callback.scope,[result,event,success,options])}}},onData:function(options,success,response){var me=this,i,len,events,event,transaction,transactions;if(success){events=me.createEvents(response);for(i=0,len=events.length;i<len;++i){event=events[i];transaction=me.getTransaction(event);me.fireEvent("data",me,event);if(transaction&&me.fireEvent("beforecallback",me,event,transaction)!==false){me.runCallback(transaction,event,true);Ext.direct.Manager.removeTransaction(transaction)}}}else{transactions=[].concat(options.transaction);for(i=0,len=transactions.length;i<len;++i){transaction=me.getTransaction(transactions[i]);if(transaction&&transaction.retryCount<me.maxRetries){transaction.retry()}else{event=new Ext.direct.ExceptionEvent({data:null,transaction:transaction,code:Ext.direct.Manager.exceptions.TRANSPORT,message:"Unable to connect to the server.",xhr:response});me.fireEvent("data",me,event);if(transaction&&me.fireEvent("beforecallback",me,transaction)!==false){me.runCallback(transaction,event,false);Ext.direct.Manager.removeTransaction(transaction)}}}}},getTransaction:function(options){return options&&options.tid?Ext.direct.Manager.getTransaction(options.tid):null},configureRequest:function(action,method,args){var me=this,callData,data,callback,scope,opts,transaction,params;callData=method.getCallData(args);data=callData.data;callback=callData.callback;scope=callData.scope;opts=callData.options||{};params=Ext.apply({},{provider:me,args:args,action:action,method:method.name,data:data,callbackOptions:opts,callback:scope&&Ext.isFunction(callback)?Ext.Function.bind(callback,scope):callback});if(opts.timeout){Ext.applyIf(params,{timeout:opts.timeout})}transaction=new Ext.direct.Transaction(params);if(me.fireEvent("beforecall",me,transaction,method)!==false){Ext.direct.Manager.addTransaction(transaction);me.queueTransaction(transaction);me.fireEvent("call",me,transaction,method)}},getCallData:function(transaction){return{action:transaction.action,method:transaction.method,data:transaction.data,type:"rpc",tid:transaction.id}},sendRequest:function(data){var me=this,request,callData,params,enableUrlEncode=me.enableUrlEncode,i,len;request={url:me.url,callback:me.onData,scope:me,transaction:data,timeout:me.timeout};if(data.timeout){request.timeout=data.timeout}if(Ext.isArray(data)){callData=[];for(i=0,len=data.length;i<len;++i){callData.push(me.getCallData(data[i]))}}else{callData=me.getCallData(data)}if(enableUrlEncode){params={};params[Ext.isString(enableUrlEncode)?enableUrlEncode:"data"]=Ext.encode(callData);request.params=params}else{request.jsonData=callData}Ext.Ajax.request(request)},queueTransaction:function(transaction){var me=this,enableBuffer=me.enableBuffer;if(transaction.form){me.sendFormRequest(transaction);return}if(enableBuffer===false||typeof transaction.timeout!=="undefined"){me.sendRequest(transaction);return}me.callBuffer.push(transaction);if(enableBuffer){if(!me.callTask){me.callTask=new Ext.util.DelayedTask(me.combineAndSend,me)}me.callTask.delay(Ext.isNumber(enableBuffer)?enableBuffer:10)}else{me.combineAndSend()}},combineAndSend:function(){var me=this,buffer=me.callBuffer,len=buffer.length;if(len>0){me.sendRequest(len==1?buffer[0]:buffer);me.callBuffer=[]}},configureFormRequest:function(action,method,form,callback,scope){var me=this,transaction,isUpload,params;transaction=new Ext.direct.Transaction({provider:me,action:action,method:method.name,args:[form,callback,scope],callback:scope&&Ext.isFunction(callback)?Ext.Function.bind(callback,scope):callback,isForm:true});if(me.fireEvent("beforecall",me,transaction,method)!==false){Ext.direct.Manager.addTransaction(transaction);isUpload=String(form.getAttribute("enctype")).toLowerCase()=="multipart/form-data";params={extTID:transaction.id,extAction:action,extMethod:method.name,extType:"rpc",extUpload:String(isUpload)};Ext.apply(transaction,{form:Ext.getDom(form),isUpload:isUpload,params:callback&&Ext.isObject(callback.params)?Ext.apply(params,callback.params):params});me.fireEvent("call",me,transaction,method);me.sendFormRequest(transaction)}},sendFormRequest:function(transaction){var me=this;Ext.Ajax.request({url:me.url,params:transaction.params,callback:me.onData,scope:me,form:transaction.form,isUpload:transaction.isUpload,transaction:transaction})}});
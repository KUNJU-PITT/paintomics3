Ext.define("Ext.layout.container.CheckboxGroup",{extend:"Ext.layout.container.Container",alias:["layout.checkboxgroup"],autoFlex:true,type:"checkboxgroup",createsInnerCt:true,childEls:["innerCt"],renderTpl:['<table id="{ownerId}-innerCt" class="'+Ext.plainTableCls+'" cellpadding="0"','role="presentation" style="{tableStyle}"><tbody><tr>','<tpl for="columns">','<td class="{parent.colCls}" valign="top" style="{style}">',"{% this.renderColumn(out,parent,xindex-1) %}","</td>","</tpl>","</tr></tbody></table>"],lastOwnerItemsGeneration:null,beginLayout:function(ownerContext){var me=this,columns,numCols,i,width,cwidth,totalFlex=0,flexedCols=0,autoFlex=me.autoFlex,innerCtStyle=me.innerCt.dom.style;me.callParent(arguments);columns=me.columnNodes;ownerContext.innerCtContext=ownerContext.getEl("innerCt",me);if(!ownerContext.widthModel.shrinkWrap){numCols=columns.length;if(me.columnsArray){for(i=0;i<numCols;i++){width=me.owner.columns[i];if(width<1){totalFlex+=width;flexedCols++}}for(i=0;i<numCols;i++){width=me.owner.columns[i];if(width<1){cwidth=width/totalFlex*100+"%"}else{cwidth=width+"px"}columns[i].style.width=cwidth}}else{for(i=0;i<numCols;i++){cwidth=autoFlex?1/numCols*100+"%":"";columns[i].style.width=cwidth;flexedCols++}}if(!flexedCols){innerCtStyle.tableLayout="fixed";innerCtStyle.width=""}else if(flexedCols<numCols){innerCtStyle.tableLayout="fixed";innerCtStyle.width="100%"}else{innerCtStyle.tableLayout="auto";if(autoFlex){innerCtStyle.width="100%"}else{innerCtStyle.width=""}}}else{innerCtStyle.tableLayout="auto";innerCtStyle.width=""}},cacheElements:function(){var me=this;me.callParent();me.rowEl=me.innerCt.down("tr");me.columnNodes=me.rowEl.dom.childNodes},calculate:function(ownerContext){var me=this,targetContext,widthShrinkWrap,heightShrinkWrap,shrinkWrap,table,targetPadding;if(!ownerContext.getDomProp("containerChildrenSizeDone")){me.done=false}else{targetContext=ownerContext.innerCtContext;widthShrinkWrap=ownerContext.widthModel.shrinkWrap;heightShrinkWrap=ownerContext.heightModel.shrinkWrap;shrinkWrap=heightShrinkWrap||widthShrinkWrap;table=targetContext.el.dom;targetPadding=shrinkWrap&&targetContext.getPaddingInfo();if(widthShrinkWrap){ownerContext.setContentWidth(table.offsetWidth+targetPadding.width,true)}if(heightShrinkWrap){ownerContext.setContentHeight(table.offsetHeight+targetPadding.height,true)}}},doRenderColumn:function(out,renderData,columnIndex){var me=renderData.$layout,owner=me.owner,columnCount=renderData.columnCount,items=owner.items.items,itemCount=items.length,item,itemIndex,rowCount,increment,tree;if(owner.vertical){rowCount=Math.ceil(itemCount/columnCount);itemIndex=columnIndex*rowCount;itemCount=Math.min(itemCount,itemIndex+rowCount);increment=1}else{itemIndex=columnIndex;increment=columnCount}for(;itemIndex<itemCount;itemIndex+=increment){item=items[itemIndex];me.configureItem(item);tree=item.getRenderTree();Ext.DomHelper.generateMarkup(tree,out)}},getColumnCount:function(){var me=this,owner=me.owner,ownerColumns=owner.columns;if(me.columnsArray){return ownerColumns.length}if(Ext.isNumber(ownerColumns)){return ownerColumns}return owner.items.length},getItemSizePolicy:function(item){return this.autoSizePolicy},getRenderData:function(){var me=this,data=me.callParent(),owner=me.owner,i,columns=me.getColumnCount(),width,column,cwidth,autoFlex=me.autoFlex,totalFlex=0,flexedCols=0;if(me.columnsArray){for(i=0;i<columns;i++){width=me.owner.columns[i];if(width<1){totalFlex+=width;flexedCols++}}}data.colCls=owner.groupCls;data.columnCount=columns;data.columns=[];for(i=0;i<columns;i++){column=data.columns[i]={};if(me.columnsArray){width=me.owner.columns[i];if(width<1){cwidth=width/totalFlex*100+"%"}else{cwidth=width+"px"}column.style="width:"+cwidth}else{column.style="width:"+1/columns*100+"%";flexedCols++}}data.tableStyle=!flexedCols?"table-layout:fixed;":flexedCols<columns?"table-layout:fixed;width:100%":autoFlex?"table-layout:auto;width:100%":"table-layout:auto;";return data},initLayout:function(){var me=this,owner=me.owner;me.columnsArray=Ext.isArray(owner.columns);me.autoColumns=!owner.columns||owner.columns==="auto";me.vertical=owner.vertical;me.callParent()},isValidParent:function(){return true},setupRenderTpl:function(renderTpl){this.callParent(arguments);renderTpl.renderColumn=this.doRenderColumn},renderChildren:function(){var me=this,generation=me.owner.items.generation;if(me.lastOwnerItemsGeneration!==generation){me.lastOwnerItemsGeneration=generation;me.renderItems(me.getLayoutItems())}},renderItems:function(items){var me=this,itemCount=items.length,i,item,rowCount,columnCount,rowIndex,columnIndex;if(itemCount){Ext.suspendLayouts();if(me.autoColumns){me.addMissingColumns(itemCount)}columnCount=me.columnNodes.length;rowCount=Math.ceil(itemCount/columnCount);for(i=0;i<itemCount;i++){item=items[i];rowIndex=me.getRenderRowIndex(i,rowCount,columnCount);columnIndex=me.getRenderColumnIndex(i,rowCount,columnCount);if(!item.rendered){me.renderItem(item,rowIndex,columnIndex)}else if(!me.isItemAtPosition(item,rowIndex,columnIndex)){me.moveItem(item,rowIndex,columnIndex)}}if(me.autoColumns){me.removeExceedingColumns(itemCount)}Ext.resumeLayouts(true)}},isItemAtPosition:function(item,rowIndex,columnIndex){return item.el.dom===this.getNodeAt(rowIndex,columnIndex)},getRenderColumnIndex:function(itemIndex,rowCount,columnCount){if(this.vertical){return Math.floor(itemIndex/rowCount)}else{return itemIndex%columnCount}},getRenderRowIndex:function(itemIndex,rowCount,columnCount){var me=this;if(me.vertical){return itemIndex%rowCount}else{return Math.floor(itemIndex/columnCount)}},getNodeAt:function(rowIndex,columnIndex){return this.columnNodes[columnIndex].childNodes[rowIndex]},addMissingColumns:function(itemsCount){var me=this,existingColumnsCount=me.columnNodes.length,missingColumnsCount,row,cls,i;if(existingColumnsCount<itemsCount){missingColumnsCount=itemsCount-existingColumnsCount;row=me.rowEl;cls=me.owner.groupCls;for(i=0;i<missingColumnsCount;i++){row.createChild({cls:cls,tag:"td",vAlign:"top"})}}},removeExceedingColumns:function(itemsCount){var me=this,existingColumnsCount=me.columnNodes.length,exceedingColumnsCount,row,i;if(existingColumnsCount>itemsCount){exceedingColumnsCount=existingColumnsCount-itemsCount;row=me.rowEl;for(i=0;i<exceedingColumnsCount;i++){row.last().remove()}}},renderItem:function(item,rowIndex,columnIndex){var me=this;me.configureItem(item);item.render(Ext.get(me.columnNodes[columnIndex]),rowIndex);me.afterRenderItem(item)},moveItem:function(item,rowIndex,columnIndex){var me=this,column=me.columnNodes[columnIndex],targetNode=column.childNodes[rowIndex];column.insertBefore(item.el.dom,targetNode||null)}});
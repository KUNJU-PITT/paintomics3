Ext.define("Ext.form.field.Spinner",{extend:"Ext.form.field.Trigger",alias:"widget.spinnerfield",alternateClassName:"Ext.form.Spinner",requires:["Ext.util.KeyNav"],trigger1Cls:Ext.baseCSSPrefix+"form-spinner-up",trigger2Cls:Ext.baseCSSPrefix+"form-spinner-down",spinUpEnabled:true,spinDownEnabled:true,keyNavEnabled:true,mouseWheelEnabled:true,repeatTriggerClick:true,onSpinUp:Ext.emptyFn,onSpinDown:Ext.emptyFn,triggerTpl:'<td style="{triggerStyle}" class="{triggerCls}">'+'<div class="'+Ext.baseCSSPrefix+"trigger-index-0 "+Ext.baseCSSPrefix+"form-trigger "+Ext.baseCSSPrefix+'form-spinner-up {spinnerUpCls} {childElCls}" role="button"></div>'+'<div class="'+Ext.baseCSSPrefix+"trigger-index-1 "+Ext.baseCSSPrefix+"form-trigger "+Ext.baseCSSPrefix+'form-spinner-down {spinnerDownCls} {childElCls}" role="button"></div>'+"</td>"+"</tr>",initComponent:function(){this.callParent();this.addEvents("spin","spinup","spindown")},onRender:function(){var me=this,triggers;me.callParent(arguments);triggers=me.triggerEl;me.spinUpEl=triggers.item(0);me.spinDownEl=triggers.item(1);me.triggerCell=me.spinUpEl.parent();if(me.keyNavEnabled){me.spinnerKeyNav=new Ext.util.KeyNav(me.inputEl,{scope:me,up:me.spinUp,down:me.spinDown})}if(me.mouseWheelEnabled){me.mon(me.bodyEl,"mousewheel",me.onMouseWheel,me)}},getSubTplMarkup:function(values){var me=this,childElCls=values.childElCls,field=Ext.form.field.Base.prototype.getSubTplMarkup.apply(me,arguments);return'<table id="'+me.id+'-triggerWrap" class="'+Ext.baseCSSPrefix+"form-trigger-wrap"+childElCls+'" cellpadding="0" cellspacing="0">'+"<tbody>"+'<tr><td id="'+me.id+'-inputCell" class="'+Ext.baseCSSPrefix+"form-trigger-input-cell"+childElCls+'">'+field+"</td>"+me.getTriggerMarkup()+"</tbody></table>"},getTriggerMarkup:function(){return this.getTpl("triggerTpl").apply(this.getTriggerData())},getTriggerData:function(){var me=this,hideTrigger=me.readOnly||me.hideTrigger;return{triggerCls:Ext.baseCSSPrefix+"trigger-cell",triggerStyle:hideTrigger?"display:none":"",spinnerUpCls:!me.spinUpEnabled?me.trigger1Cls+"-disabled":"",spinnerDownCls:!me.spinDownEnabled?me.trigger2Cls+"-disabled":""}},getTriggerWidth:function(){var me=this,totalTriggerWidth=0;if(me.triggerWrap&&!me.hideTrigger&&!me.readOnly){totalTriggerWidth=me.triggerWidth}return totalTriggerWidth},onTrigger1Click:function(){this.spinUp()},onTrigger2Click:function(){this.spinDown()},onTriggerWrapMouseup:function(){this.inputEl.focus()},spinUp:function(){var me=this;if(me.spinUpEnabled&&!me.disabled){me.fireEvent("spin",me,"up");me.fireEvent("spinup",me);me.onSpinUp()}},spinDown:function(){var me=this;if(me.spinDownEnabled&&!me.disabled){me.fireEvent("spin",me,"down");me.fireEvent("spindown",me);me.onSpinDown()}},setSpinUpEnabled:function(enabled){var me=this,wasEnabled=me.spinUpEnabled;me.spinUpEnabled=enabled;if(wasEnabled!==enabled&&me.rendered){me.spinUpEl[enabled?"removeCls":"addCls"](me.trigger1Cls+"-disabled")}},setSpinDownEnabled:function(enabled){var me=this,wasEnabled=me.spinDownEnabled;me.spinDownEnabled=enabled;if(wasEnabled!==enabled&&me.rendered){me.spinDownEl[enabled?"removeCls":"addCls"](me.trigger2Cls+"-disabled")}},onMouseWheel:function(e){var me=this,delta;if(me.hasFocus){delta=e.getWheelDelta();if(delta>0){me.spinUp()}else if(delta<0){me.spinDown()}e.stopEvent()}},onDestroy:function(){Ext.destroyMembers(this,"spinnerKeyNav","spinUpEl","spinDownEl");this.callParent()}});
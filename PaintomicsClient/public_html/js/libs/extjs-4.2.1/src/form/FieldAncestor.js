Ext.define("Ext.form.FieldAncestor",{requires:["Ext.container.Monitor"],xhooks:{initHierarchyState:function(hierarchyState){if(this.fieldDefaults){if(hierarchyState.fieldDefaults){hierarchyState.fieldDefaults=Ext.apply(Ext.Object.chain(hierarchyState.fieldDefaults),this.fieldDefaults)}else{hierarchyState.fieldDefaults=this.fieldDefaults}}}},initFieldAncestor:function(){var me=this;me.addEvents("fieldvaliditychange","fielderrorchange");me.monitor=new Ext.container.Monitor({scope:me,selector:"[isFormField]",addHandler:me.onChildFieldAdd,removeHandler:me.onChildFieldRemove});me.initFieldDefaults()},initMonitor:function(){this.monitor.bind(this)},onChildFieldAdd:function(field){var me=this;me.mon(field,"errorchange",me.handleFieldErrorChange,me);me.mon(field,"validitychange",me.handleFieldValidityChange,me)},onChildFieldRemove:function(field){var me=this;me.mun(field,"errorchange",me.handleFieldErrorChange,me);me.mun(field,"validitychange",me.handleFieldValidityChange,me)},initFieldDefaults:function(){if(!this.fieldDefaults){this.fieldDefaults={}}},handleFieldValidityChange:function(field,isValid){var me=this;if(field!==me){me.fireEvent("fieldvaliditychange",me,field,isValid);me.onFieldValidityChange(field,isValid)}},handleFieldErrorChange:function(labelable,activeError){var me=this;if(labelable!==me){me.fireEvent("fielderrorchange",me,labelable,activeError);me.onFieldErrorChange(labelable,activeError)}},onFieldValidityChange:Ext.emptyFn,onFieldErrorChange:Ext.emptyFn,beforeDestroy:function(){this.monitor.unbind();this.callParent()}});
Ext.define("Ext.selection.TreeModel",{extend:"Ext.selection.RowModel",alias:"selection.treemodel",constructor:function(config){this.callParent(arguments);if(this.pruneRemoved){this.pruneRemoved=false;this.pruneRemovedNodes=true}},bindStore:function(store,initial){var me=this;me.callParent(arguments);if(me.pruneRemovedNodes){me.view.mon(me.treeStore,{remove:me.onNodeRemove,scope:me})}},onNodeRemove:function(parent,node,isMove){if(!isMove){this.deselectDeletedRecords([node])}},onKeyRight:function(e,t){this.navExpand(e,t)},navExpand:function(e,t){var focused=this.getLastFocused(),view=this.view;if(focused){if(focused.isExpanded()){this.onKeyDown(e,t)}else if(focused.isExpandable()){if(!view.isTreeView){view=view.lockingPartner}view.expand(focused)}}},onKeyLeft:function(e,t){this.navCollapse(e,t)},navCollapse:function(e,t){var me=this,focused=this.getLastFocused(),view=this.view,parentNode;if(focused){parentNode=focused.parentNode;if(focused.isExpanded()){if(!view.isTreeView){view=view.lockingPartner}view.collapse(focused)}else if(parentNode&&!parentNode.isRoot()){if(e.shiftKey){me.selectRange(parentNode,focused,e.ctrlKey,"up");me.setLastFocused(parentNode)}else if(e.ctrlKey){me.setLastFocused(parentNode)}else{me.select(parentNode)}}}},onKeySpace:function(e,t){if(e.record.data.checked!=null){this.toggleCheck(e)}else{this.callParent(arguments)}},onKeyEnter:function(e,t){if(e.record.data.checked!=null){this.toggleCheck(e)}else{this.callParent(arguments)}},toggleCheck:function(e){var view=this.view,selected=this.getLastSelected();e.stopEvent();if(selected){if(!view.isTreeView){view=view.lockingPartner}view.onCheckChange(selected)}}});
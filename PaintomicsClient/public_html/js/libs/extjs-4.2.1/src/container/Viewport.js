Ext.define("Ext.container.Viewport",{extend:"Ext.container.Container",alias:"widget.viewport",requires:["Ext.EventManager"],alternateClassName:"Ext.Viewport",isViewport:true,ariaRole:"application",preserveElOnDestroy:true,viewportCls:Ext.baseCSSPrefix+"viewport",initComponent:function(){var me=this,html=document.body.parentNode,el=me.el=Ext.getBody();Ext.getScrollbarSize();me.width=me.height=undefined;me.callParent(arguments);Ext.fly(html).addCls(me.viewportCls);if(me.autoScroll){Ext.fly(html).setStyle(me.getOverflowStyle());delete me.autoScroll}el.setHeight=el.setWidth=Ext.emptyFn;el.dom.scroll="no";me.allowDomMove=false;me.renderTo=me.el},applyTargetCls:function(targetCls){this.el.addCls(targetCls)},onRender:function(){var me=this;me.callParent(arguments);me.width=Ext.Element.getViewportWidth();me.height=Ext.Element.getViewportHeight()},afterFirstLayout:function(){var me=this;me.callParent(arguments);setTimeout(function(){Ext.EventManager.onWindowResize(me.fireResize,me)},1)},fireResize:function(width,height){if(width!=this.width||height!=this.height){this.setSize(width,height)}},initHierarchyState:function(hierarchyState){this.callParent([this.hierarchyState=Ext.rootHierarchyState])},beforeDestroy:function(){var me=this;me.removeUIFromElement();me.el.removeCls(me.baseCls);Ext.fly(document.body.parentNode).removeCls(me.viewportCls);me.callParent()}});
Ext.define("Ext.data.Tree",{alias:"data.tree",mixins:{observable:"Ext.util.Observable"},root:null,constructor:function(root){var me=this;me.mixins.observable.constructor.call(me);if(root){me.setRootNode(root)}me.on({scope:me,idchanged:me.onNodeIdChanged,insert:me.onNodeInsert,append:me.onNodeAppend,remove:me.onNodeRemove})},getRootNode:function(){return this.root},setRootNode:function(node){var me=this;me.root=node;if(node.rootOf){node.rootOf.removeRootNode()}else if(node.parentNode){node.parentNode.removeChild(node)}node.rootOf=me;if(node.fireEventArgs("beforeappend",[null,node])!==false){node.set("root",true);node.updateInfo(true,{isFirst:true,isLast:true,depth:0,index:0,parentId:null});me.nodeHash={};node.fireEvent("append",null,node);node.fireEvent("rootchange",node)}return node},removeRootNode:function(){var me=this,root=me.root;root.set("root",false);root.fireEvent("remove",null,root,false);root.fireEvent("rootchange",null);root.rootOf=me.root=null;return root},flatten:function(){return Ext.Object.getValues(this.nodeHash)},onNodeInsert:function(parent,node){this.registerNode(node,true)},onNodeAppend:function(parent,node){this.registerNode(node,true)},onNodeRemove:function(parent,node){this.unregisterNode(node,true)},onNodeIdChanged:function(node,oldId,newId,oldInternalId){var nodeHash=this.nodeHash;nodeHash[node.internalId]=node;delete nodeHash[oldInternalId]},getNodeById:function(id){return this.nodeHash[id]},registerNode:function(node,includeChildren){var me=this,children,length,i;me.nodeHash[node.internalId]=node;if(includeChildren===true){children=node.childNodes;length=children.length;for(i=0;i<length;i++){me.registerNode(children[i],true)}}},unregisterNode:function(node,includeChildren){var me=this,children,length,i;delete me.nodeHash[node.internalId];if(includeChildren===true){children=node.childNodes;length=children.length;for(i=0;i<length;i++){me.unregisterNode(children[i],true)}}},sort:function(sorterFn,recursive){this.getRootNode().sort(sorterFn,recursive)},filter:function(filters,recursive){this.getRootNode().filter(filters,recursive)}});
Ext.define("Ext.data.association.HasMany",{extend:"Ext.data.association.Association",alternateClassName:"Ext.data.HasManyAssociation",requires:["Ext.util.Inflector"],alias:"association.hasmany",constructor:function(config){var me=this,ownerProto,name;me.callParent(arguments);me.name=me.name||Ext.util.Inflector.pluralize(me.associatedName.toLowerCase());ownerProto=me.ownerModel.prototype;name=me.name;Ext.applyIf(me,{storeName:name+"Store",foreignKey:me.ownerName.toLowerCase()+"_id"});ownerProto[name]=me.createStore()},createStore:function(){var that=this,associatedModel=that.associatedModel,storeName=that.storeName,foreignKey=that.foreignKey,primaryKey=that.primaryKey,filterProperty=that.filterProperty,autoLoad=that.autoLoad,storeConfig=that.storeConfig||{};return function(){var me=this,config,filter,modelDefaults={};if(me[storeName]===undefined){if(filterProperty){filter={property:filterProperty,value:me.get(filterProperty),exactMatch:true}}else{filter={property:foreignKey,value:me.get(primaryKey),exactMatch:true}}modelDefaults[foreignKey]=me.get(primaryKey);config=Ext.apply({},storeConfig,{model:associatedModel,filters:[filter],remoteFilter:false,modelDefaults:modelDefaults,disableMetaChangeEvent:true});me[storeName]=Ext.data.AbstractStore.create(config);if(autoLoad){me[storeName].load()}}return me[storeName]}},read:function(record,reader,associationData){var store=record[this.name](),inverse,items,iLen,i;store.add(reader.read(associationData).records);inverse=this.associatedModel.prototype.associations.findBy(function(assoc){return assoc.type==="belongsTo"&&assoc.associatedName===record.$className});if(inverse){items=store.data.items;iLen=items.length;for(i=0;i<iLen;i++){items[i][inverse.instanceName]=record}}}});
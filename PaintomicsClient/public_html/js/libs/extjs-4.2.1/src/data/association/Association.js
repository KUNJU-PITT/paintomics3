Ext.define("Ext.data.association.Association",{alternateClassName:"Ext.data.Association",primaryKey:"id",associationKeyFunction:null,defaultReaderType:"json",isAssociation:true,initialConfig:null,statics:{AUTO_ID:1e3,create:function(association){if(Ext.isString(association)){association={type:association}}switch(association.type){case"belongsTo":return new Ext.data.association.BelongsTo(association);case"hasMany":return new Ext.data.association.HasMany(association);case"hasOne":return new Ext.data.association.HasOne(association);default:Ext.Error.raise('Unknown Association type: "'+association.type+'"')}return association}},constructor:function(config){Ext.apply(this,config);var me=this,types=Ext.ModelManager.types,ownerName=config.ownerModel,associatedName=config.associatedModel,ownerModel=types[ownerName],associatedModel=types[associatedName],associationKey=config.associationKey,keyReIdx;if(associationKey){keyReIdx=String(associationKey).search(/[\[\.]/);if(keyReIdx>=0){me.associationKeyFunction=Ext.functionFactory("obj","return obj"+(keyReIdx>0?".":"")+associationKey)}}me.initialConfig=config;if(ownerModel===undefined){Ext.Error.raise("The configured ownerModel was not valid (you tried "+ownerName+")")}if(associatedModel===undefined){Ext.Error.raise("The configured associatedModel was not valid (you tried "+associatedName+")")}me.ownerModel=ownerModel;me.associatedModel=associatedModel;Ext.applyIf(me,{ownerName:ownerName,associatedName:associatedName});me.associationId="association"+ ++me.statics().AUTO_ID},getReader:function(){var me=this,reader=me.reader,model=me.associatedModel;if(reader){if(Ext.isString(reader)){reader={type:reader}}if(reader.isReader){reader.setModel(model)}else{Ext.applyIf(reader,{model:model,type:me.defaultReaderType})}me.reader=Ext.createByAlias("reader."+reader.type,reader)}return me.reader||null}});
Ext.define("Ext.data.association.BelongsTo",{extend:"Ext.data.association.Association",alternateClassName:"Ext.data.BelongsToAssociation",alias:"association.belongsto",constructor:function(config){this.callParent(arguments);var me=this,ownerProto=me.ownerModel.prototype,associatedName=me.associatedName,getterName=me.getterName||"get"+associatedName,setterName=me.setterName||"set"+associatedName;Ext.applyIf(me,{name:associatedName,foreignKey:associatedName.toLowerCase()+"_id",instanceName:associatedName+"BelongsToInstance",associationKey:associatedName.toLowerCase()});ownerProto[getterName]=me.createGetter();ownerProto[setterName]=me.createSetter()},createSetter:function(){var me=this,foreignKey=me.foreignKey,instanceName=me.instanceName;return function(value,options,scope){var setByRecord=value&&value.isModel,valueToSet=setByRecord?value.getId():value;if(setByRecord){this[instanceName]=value}else if(this[instanceName]instanceof Ext.data.Model&&!this.isEqual(this.get(foreignKey),valueToSet)){delete this[instanceName]}this.set(foreignKey,valueToSet);if(Ext.isFunction(options)){options={callback:options,scope:scope||this}}if(Ext.isObject(options)){return this.save(options)}}},createGetter:function(){var me=this,associatedName=me.associatedName,associatedModel=me.associatedModel,foreignKey=me.foreignKey,primaryKey=me.primaryKey,instanceName=me.instanceName;return function(options,scope){options=options||{};var model=this,foreignKeyId=model.get(foreignKey),success,instance,args;if(options.reload===true||model[instanceName]===undefined){instance=Ext.ModelManager.create({},associatedName);instance.set(primaryKey,foreignKeyId);if(typeof options=="function"){options={callback:options,scope:scope||model}}success=options.success;options.success=function(rec){model[instanceName]=rec;if(success){success.apply(this,arguments)}};associatedModel.load(foreignKeyId,options);model[instanceName]=instance;return instance}else{instance=model[instanceName];args=[instance];scope=scope||options.scope||model;Ext.callback(options,scope,args);Ext.callback(options.success,scope,args);Ext.callback(options.failure,scope,args);Ext.callback(options.callback,scope,args);return instance}}},read:function(record,reader,associationData){record[this.instanceName]=reader.read([associationData]).records[0]}});